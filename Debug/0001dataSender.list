
0001dataSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003814  08003814  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800381c  0800381c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003820  08003820  00013820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08003894  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003894  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000978d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001900  00000000  00000000  0002982d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d8  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002170a  00000000  00000000  0002c008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072d3  00000000  00000000  0004d712  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6c83  00000000  00000000  000549e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002574  00000000  00000000  0011b6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080036d8 	.word	0x080036d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080036d8 	.word	0x080036d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
data d1;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
d1.a=0;
 8000576:	2300      	movs	r3, #0
 8000578:	713b      	strb	r3, [r7, #4]
d1.g=1;
 800057a:	2301      	movs	r3, #1
 800057c:	717b      	strb	r3, [r7, #5]
d1.b=2;
 800057e:	2302      	movs	r3, #2
 8000580:	71bb      	strb	r3, [r7, #6]
d1.c=3;
 8000582:	2303      	movs	r3, #3
 8000584:	71fb      	strb	r3, [r7, #7]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fbb5 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f88b 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f96f 	bl	8000870 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000592:	f000 f937 	bl	8000804 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000596:	f000 f8e3 	bl	8000760 <MX_ADC1_Init>

	  while (1)
	    {


	  	                HAL_Delay(1000);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f000 fc1b 	bl	8000dd8 <HAL_Delay>
	                       while(FLAG)
 80005a2:	e043      	b.n	800062c <main+0xbc>
	                       {
	                    	   printf("the system is turned on");
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <main+0xe8>)
 80005a6:	f002 f9b3 	bl	8002910 <iprintf>
	                      	 HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f000 fc13 	bl	8000dd8 <HAL_Delay>
	                      	 HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	4829      	ldr	r0, [pc, #164]	; (800065c <main+0xec>)
 80005b8:	f001 fac7 	bl	8001b4a <HAL_GPIO_TogglePin>
	                      	 if(pot()>512)
 80005bc:	f002 f944 	bl	8002848 <pot>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c6:	dd27      	ble.n	8000618 <main+0xa8>
	                      	 {
	                      		 if(pir()==1)
 80005c8:	f002 f95a 	bl	8002880 <pir>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d10e      	bne.n	80005f0 <main+0x80>
	                      		 {
	                      			 HAL_SPI_Transmit(&hspi1, &d1.b, 1, 100);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	1c99      	adds	r1, r3, #2
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2201      	movs	r2, #1
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <main+0xf0>)
 80005dc:	f001 ff54 	bl	8002488 <HAL_SPI_Transmit>
	                      			 printf("traces of human found");
 80005e0:	4820      	ldr	r0, [pc, #128]	; (8000664 <main+0xf4>)
 80005e2:	f002 f995 	bl	8002910 <iprintf>
	                      			 HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f000 fbf5 	bl	8000dd8 <HAL_Delay>
 80005ee:	e01d      	b.n	800062c <main+0xbc>
	                      		 }
	                      		 else if(pir()==0)
 80005f0:	f002 f946 	bl	8002880 <pir>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d118      	bne.n	800062c <main+0xbc>
	                      		 {
	                      			 HAL_SPI_Transmit(&hspi1, &d1.c, 1, 100);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	1cd9      	adds	r1, r3, #3
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	4817      	ldr	r0, [pc, #92]	; (8000660 <main+0xf0>)
 8000604:	f001 ff40 	bl	8002488 <HAL_SPI_Transmit>
	                      			 printf("no traces of human");
 8000608:	4817      	ldr	r0, [pc, #92]	; (8000668 <main+0xf8>)
 800060a:	f002 f981 	bl	8002910 <iprintf>
	                      			 HAL_Delay(1000);
 800060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000612:	f000 fbe1 	bl	8000dd8 <HAL_Delay>
 8000616:	e009      	b.n	800062c <main+0xbc>
	                      		 }
	                      	 }
	                      	 else
	                      	 {
	                      		 HAL_SPI_Transmit(&hspi1, &d1.g, 1, 100);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	1c59      	adds	r1, r3, #1
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	2201      	movs	r2, #1
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0xf0>)
 8000622:	f001 ff31 	bl	8002488 <HAL_SPI_Transmit>
	                      		 printf("pot value is less than 512");
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <main+0xfc>)
 8000628:	f002 f972 	bl	8002910 <iprintf>
	                       while(FLAG)
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <main+0x100>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1b6      	bne.n	80005a4 <main+0x34>
	                      	 }
	                       }

	  		 			  HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fbcd 	bl	8000dd8 <HAL_Delay>
	  		 			  HAL_SPI_Transmit(&hspi1, &d1.a, 1, 100);
 800063e:	1d39      	adds	r1, r7, #4
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0xf0>)
 8000646:	f001 ff1f 	bl	8002488 <HAL_SPI_Transmit>
	  		 			  printf("the system is turned off");
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <main+0x104>)
 800064c:	f002 f960 	bl	8002910 <iprintf>
	  		 			  FLAG=0;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <main+0x100>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	  	                HAL_Delay(1000);
 8000656:	e7a0      	b.n	800059a <main+0x2a>
 8000658:	080036f0 	.word	0x080036f0
 800065c:	40020c00 	.word	0x40020c00
 8000660:	200000e4 	.word	0x200000e4
 8000664:	08003708 	.word	0x08003708
 8000668:	08003720 	.word	0x08003720
 800066c:	08003734 	.word	0x08003734
 8000670:	2000008c 	.word	0x2000008c
 8000674:	08003750 	.word	0x08003750

08000678 <HAL_GPIO_EXTI_Callback>:
	  	  }
	    /* USER CODE END 3 */
	  }
  /* USER CODE END 3 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
	FLAG ^=1;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f083 0301 	eor.w	r3, r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000008c 	.word	0x2000008c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f924 	bl	8002900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xb4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xb4>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xb4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <SystemClock_Config+0xb8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <SystemClock_Config+0xb8>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <SystemClock_Config+0xb8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fa4b 	bl	8001bb0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000720:	f000 f91e 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fca6 	bl	8002090 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800074a:	f000 f909 	bl	8000960 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC1_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC1_Init+0xa0>)
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007c2:	f000 fb2b 	bl	8000e1c <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007cc:	f000 f8c8 	bl	8000960 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007d8:	2307      	movs	r3, #7
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_ADC1_Init+0x98>)
 80007e2:	f000 fcb7 	bl	8001154 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 f8b8 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	40012000 	.word	0x40012000
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2218      	movs	r2, #24
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f001 fdb3 	bl	80023c0 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f87e 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000e4 	.word	0x200000e4
 800086c:	40013000 	.word	0x40013000

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_GPIO_Init+0xe0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a30      	ldr	r2, [pc, #192]	; (8000950 <MX_GPIO_Init+0xe0>)
 8000890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_GPIO_Init+0xe0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <MX_GPIO_Init+0xe0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a29      	ldr	r2, [pc, #164]	; (8000950 <MX_GPIO_Init+0xe0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <MX_GPIO_Init+0xe0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_GPIO_Init+0xe0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a22      	ldr	r2, [pc, #136]	; (8000950 <MX_GPIO_Init+0xe0>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_GPIO_Init+0xe0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0xe4>)
 80008e2:	f001 f919 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0xe8>)
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4619      	mov	r1, r3
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <MX_GPIO_Init+0xec>)
 80008fa:	f000 ff5b 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : pir_sensor_Pin */
  GPIO_InitStruct.Pin = pir_sensor_Pin;
 80008fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(pir_sensor_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_GPIO_Init+0xe4>)
 8000914:	f000 ff4e 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <MX_GPIO_Init+0xe4>)
 8000932:	f000 ff3f 	bl	80017b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2006      	movs	r0, #6
 800093c:	f000 ff03 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000940:	2006      	movs	r0, #6
 8000942:	f000 ff1c 	bl	800177e <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020c00 	.word	0x40020c00
 8000958:	10110000 	.word	0x10110000
 800095c:	40020000 	.word	0x40020000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_ADC_MspInit+0x7c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d127      	bne.n	8000a32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_ADC_MspInit+0x80>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <HAL_ADC_MspInit+0x80>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_ADC_MspInit+0x80>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_ADC_MspInit+0x80>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_ADC_MspInit+0x80>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_ADC_MspInit+0x80>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = pot_Pin;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <HAL_ADC_MspInit+0x84>)
 8000a2e:	f000 fec1 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aa2:	23e0      	movs	r3, #224	; 0xe0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_SPI_MspInit+0x8c>)
 8000abe:	f000 fe79 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013000 	.word	0x40013000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f934 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f001 f821 	bl	8001b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e00a      	b.n	8000b6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b54:	f3af 8000 	nop.w
 8000b58:	4601      	mov	r1, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	b2ca      	uxtb	r2, r1
 8000b62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	3301      	adds	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <_read+0x12>
	}

return len;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e009      	b.n	8000ba2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	60ba      	str	r2, [r7, #8]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbf1      	blt.n	8000b8e <_write+0x12>
	}
	return len;
 8000baa:	687b      	ldr	r3, [r7, #4]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_close>:

int _close(int file)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bdc:	605a      	str	r2, [r3, #4]
	return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_isatty>:

int _isatty(int file)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x50>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x16>
		heap_end = &end;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <_sbrk+0x50>)
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <_sbrk+0x54>)
 8000c30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <_sbrk+0x50>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <_sbrk+0x50>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	466a      	mov	r2, sp
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d907      	bls.n	8000c56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c46:	f001 fe31 	bl	80028ac <__errno>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e006      	b.n	8000c64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <_sbrk+0x50>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <_sbrk+0x50>)
 8000c60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000090 	.word	0x20000090
 8000c70:	20000148 	.word	0x20000148

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <SystemInit+0x28>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <SystemInit+0x28>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x28>)
 8000c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ca6:	e003      	b.n	8000cb0 <LoopCopyDataInit>

08000ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cae:	3104      	adds	r1, #4

08000cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb8:	d3f6      	bcc.n	8000ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cbc:	e002      	b.n	8000cc4 <LoopFillZerobss>

08000cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cc0:	f842 3b04 	str.w	r3, [r2], #4

08000cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc8:	d3f9      	bcc.n	8000cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ffd3 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f001 fdf3 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fc4d 	bl	8000570 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cdc:	08003824 	.word	0x08003824
  ldr  r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ce8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000cec:	20000144 	.word	0x20000144

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 fd07 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe22 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fd1f 	bl	800179a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 fce7 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000013c 	.word	0x2000013c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000013c 	.word	0x2000013c

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_Delay+0x40>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e033      	b.n	8000e9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fdc0 	bl	80009c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e62:	f023 0302 	bic.w	r3, r3, #2
 8000e66:	f043 0202 	orr.w	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fa92 	bl	8001398 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8a:	e001      	b.n	8000e90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Start+0x1a>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e0a5      	b.n	800100a <HAL_ADC_Start+0x166>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d018      	beq.n	8000f06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0201 	orr.w	r2, r2, #1
 8000ee2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee4:	4b4c      	ldr	r3, [pc, #304]	; (8001018 <HAL_ADC_Start+0x174>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	; (800101c <HAL_ADC_Start+0x178>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9a      	lsrs	r2, r3, #18
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ef8:	e002      	b.n	8000f00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d179      	bne.n	8001008 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f52:	d106      	bne.n	8000f62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f023 0206 	bic.w	r2, r3, #6
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <HAL_ADC_Start+0x17c>)
 8000f72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d12a      	bne.n	8000fe0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <HAL_ADC_Start+0x180>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d015      	beq.n	8000fc0 <HAL_ADC_Start+0x11c>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a23      	ldr	r2, [pc, #140]	; (8001028 <HAL_ADC_Start+0x184>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_Start+0x106>
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_ADC_Start+0x17c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00a      	beq.n	8000fc0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <HAL_ADC_Start+0x188>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d129      	bne.n	8001008 <HAL_ADC_Start+0x164>
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_ADC_Start+0x17c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d823      	bhi.n	8001008 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11c      	bne.n	8001008 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	e013      	b.n	8001008 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_ADC_Start+0x180>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10e      	bne.n	8001008 <HAL_ADC_Start+0x164>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001006:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000
 800101c:	431bde83 	.word	0x431bde83
 8001020:	40012300 	.word	0x40012300
 8001024:	40012000 	.word	0x40012000
 8001028:	40012100 	.word	0x40012100
 800102c:	40012200 	.word	0x40012200

08001030 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104c:	d113      	bne.n	8001076 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800105c:	d10b      	bne.n	8001076 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f043 0220 	orr.w	r2, r3, #32
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e05c      	b.n	8001130 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001076:	f7ff fea3 	bl	8000dc0 <HAL_GetTick>
 800107a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800107c:	e01a      	b.n	80010b4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d016      	beq.n	80010b4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <HAL_ADC_PollForConversion+0x6c>
 800108c:	f7ff fe98 	bl	8000dc0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d20b      	bcs.n	80010b4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f043 0204 	orr.w	r2, r3, #4
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e03d      	b.n	8001130 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d1dd      	bne.n	800107e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f06f 0212 	mvn.w	r2, #18
 80010ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d123      	bne.n	800112e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d11f      	bne.n	800112e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001106:	2b00      	cmp	r3, #0
 8001108:	d111      	bne.n	800112e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1c>
 800116c:	2302      	movs	r3, #2
 800116e:	e105      	b.n	800137c <HAL_ADC_ConfigChannel+0x228>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d925      	bls.n	80011cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d9      	ldr	r1, [r3, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4403      	add	r3, r0
 80011be:	3b1e      	subs	r3, #30
 80011c0:	409a      	lsls	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e022      	b.n	8001212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	2207      	movs	r2, #7
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	4603      	mov	r3, r0
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4403      	add	r3, r0
 8001208:	409a      	lsls	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d824      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3b05      	subs	r3, #5
 800122c:	221f      	movs	r2, #31
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b05      	subs	r3, #5
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e04c      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d824      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b23      	subs	r3, #35	; 0x23
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43da      	mvns	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b23      	subs	r3, #35	; 0x23
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
 80012b4:	e023      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b41      	subs	r3, #65	; 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	; 0x41
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_ADC_ConfigChannel+0x234>)
 8001300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_ADC_ConfigChannel+0x238>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d109      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1cc>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d105      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_ADC_ConfigChannel+0x238>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d123      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x21e>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <HAL_ADC_ConfigChannel+0x1e6>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b11      	cmp	r3, #17
 8001338:	d11b      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d111      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_ADC_ConfigChannel+0x23c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_ADC_ConfigChannel+0x240>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9a      	lsrs	r2, r3, #18
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3b01      	subs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40012300 	.word	0x40012300
 800138c:	40012000 	.word	0x40012000
 8001390:	20000000 	.word	0x20000000
 8001394:	431bde83 	.word	0x431bde83

08001398 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a0:	4b79      	ldr	r3, [pc, #484]	; (8001588 <ADC_Init+0x1f0>)
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	021a      	lsls	r2, r3, #8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	4a58      	ldr	r2, [pc, #352]	; (800158c <ADC_Init+0x1f4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d022      	beq.n	8001476 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6899      	ldr	r1, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	e00f      	b.n	8001496 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0202 	bic.w	r2, r2, #2
 80014a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
 80014b0:	005a      	lsls	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01b      	beq.n	80014fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6859      	ldr	r1, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	3b01      	subs	r3, #1
 80014f0:	035a      	lsls	r2, r3, #13
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	e007      	b.n	800150c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	3b01      	subs	r3, #1
 8001528:	051a      	lsls	r2, r3, #20
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6899      	ldr	r1, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154e:	025a      	lsls	r2, r3, #9
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	029a      	lsls	r2, r3, #10
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012300 	.word	0x40012300
 800158c:	0f000001 	.word	0x0f000001

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e16b      	b.n	8001aa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 815a 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d00b      	beq.n	800180e <HAL_GPIO_Init+0x5a>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001802:	2b11      	cmp	r3, #17
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b12      	cmp	r3, #18
 800180c:	d130      	bne.n	8001870 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0xfc>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80b4 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_GPIO_Init+0x308>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <HAL_GPIO_Init+0x308>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_GPIO_Init+0x308>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_GPIO_Init+0x310>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_GPIO_Init+0x314>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d025      	beq.n	80019d6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <HAL_GPIO_Init+0x318>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01f      	beq.n	80019d2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <HAL_GPIO_Init+0x31c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4d      	ldr	r2, [pc, #308]	; (8001ad4 <HAL_GPIO_Init+0x320>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x216>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_GPIO_Init+0x324>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x212>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <HAL_GPIO_Init+0x328>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x20e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x32c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x20a>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00e      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019be:	2308      	movs	r3, #8
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4934      	ldr	r1, [pc, #208]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1e:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f ae90 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3724      	adds	r7, #36	; 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40021400 	.word	0x40021400
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	619a      	str	r2, [r3, #24]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d104      	bne.n	8001b6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	041a      	lsls	r2, r3, #16
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	619a      	str	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd6a 	bl	8000678 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e25b      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d075      	beq.n	8001cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	4ba3      	ldr	r3, [pc, #652]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bda:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be6:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf2:	d10b      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	4b99      	ldr	r3, [pc, #612]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05b      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x108>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d157      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e236      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x74>
 8001c16:	4b91      	ldr	r3, [pc, #580]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a90      	ldr	r2, [pc, #576]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x98>
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8a      	ldr	r2, [pc, #552]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a87      	ldr	r2, [pc, #540]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xb0>
 8001c48:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a83      	ldr	r2, [pc, #524]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a80      	ldr	r2, [pc, #512]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8aa 	bl	8000dc0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8a6 	bl	8000dc0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1fb      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xc0>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff f896 	bl	8000dc0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f892 	bl	8000dc0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1e7      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0xe8>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d11c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d116      	bne.n	8001d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_RCC_OscConfig+0x152>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e1bb      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d02:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4952      	ldr	r1, [pc, #328]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	e03a      	b.n	8001d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <HAL_RCC_OscConfig+0x2b0>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f84b 	bl	8000dc0 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f847 	bl	8000dc0 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e19c      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4940      	ldr	r1, [pc, #256]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_RCC_OscConfig+0x2b0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f82a 	bl	8000dc0 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff f826 	bl	8000dc0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e17b      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d030      	beq.n	8001dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_OscConfig+0x2b4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff f80a 	bl	8000dc0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff f806 	bl	8000dc0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e15b      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc2:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x200>
 8001dce:	e015      	b.n	8001dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x2b4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fff3 	bl	8000dc0 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dde:	f7fe ffef 	bl	8000dc0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e144      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a0 	beq.w	8001f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x2b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d121      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_RCC_OscConfig+0x2b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_RCC_OscConfig+0x2b8>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7fe ffb5 	bl	8000dc0 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e011      	b.n	8001e7e <HAL_RCC_OscConfig+0x2ce>
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000
 8001e64:	42470e80 	.word	0x42470e80
 8001e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe ffa8 	bl	8000dc0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0fd      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b81      	ldr	r3, [pc, #516]	; (8002084 <HAL_RCC_OscConfig+0x4d4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2f0>
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	4a7c      	ldr	r2, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9e:	e01c      	b.n	8001eda <HAL_RCC_OscConfig+0x32a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x312>
 8001ea8:	4b77      	ldr	r3, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a76      	ldr	r2, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	4b74      	ldr	r3, [pc, #464]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a73      	ldr	r2, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x32a>
 8001ec2:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a70      	ldr	r2, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d015      	beq.n	8001f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7fe ff6d 	bl	8000dc0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe ff69 	bl	8000dc0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0bc      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ee      	beq.n	8001eea <HAL_RCC_OscConfig+0x33a>
 8001f0c:	e014      	b.n	8001f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe ff57 	bl	8000dc0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe ff53 	bl	8000dc0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0a6      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	4b56      	ldr	r3, [pc, #344]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8092 	beq.w	8002078 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f54:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d05c      	beq.n	800201a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d141      	bne.n	8001fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCC_OscConfig+0x4dc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe ff27 	bl	8000dc0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe ff23 	bl	8000dc0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e078      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f88:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	019b      	lsls	r3, r3, #6
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	3b01      	subs	r3, #1
 8001fae:	041b      	lsls	r3, r3, #16
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	4933      	ldr	r1, [pc, #204]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x4dc>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fefc 	bl	8000dc0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe fef8 	bl	8000dc0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e04d      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x41c>
 8001fea:	e045      	b.n	8002078 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x4dc>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fee5 	bl	8000dc0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe fee1 	bl	8000dc0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e036      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x44a>
 8002018:	e02e      	b.n	8002078 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e029      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002026:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x4d8>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	429a      	cmp	r2, r3
 8002038:	d11c      	bne.n	8002074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d115      	bne.n	8002074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002054:	4293      	cmp	r3, r2
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40007000 	.word	0x40007000
 8002088:	40023800 	.word	0x40023800
 800208c:	42470060 	.word	0x42470060

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cc      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d90c      	bls.n	80020cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b65      	ldr	r3, [pc, #404]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b8      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	494d      	ldr	r1, [pc, #308]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d044      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d119      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d003      	beq.n	800214e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214a:	2b03      	cmp	r3, #3
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e067      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4934      	ldr	r1, [pc, #208]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7fe fe1e 	bl	8000dc0 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fe1a 	bl	8000dc0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e04f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d20c      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e032      	b.n	800223e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4916      	ldr	r1, [pc, #88]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002216:	f000 f821 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800221a:	4601      	mov	r1, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	fa21 f303 	lsr.w	r3, r1, r3
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fd7e 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00
 800224c:	40023800 	.word	0x40023800
 8002250:	0800376c 	.word	0x0800376c
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002272:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b04      	cmp	r3, #4
 800227c:	d007      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x32>
 800227e:	2b08      	cmp	r3, #8
 8002280:	d008      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x38>
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 808d 	bne.w	80023a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800228a:	60bb      	str	r3, [r7, #8]
       break;
 800228c:	e08c      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800228e:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCC_GetSysClockFreq+0x160>)
 8002290:	60bb      	str	r3, [r7, #8]
      break;
 8002292:	e089      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800229c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229e:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d023      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	f04f 0400 	mov.w	r4, #0
 80022b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	ea03 0501 	and.w	r5, r3, r1
 80022c0:	ea04 0602 	and.w	r6, r4, r2
 80022c4:	4a3d      	ldr	r2, [pc, #244]	; (80023bc <HAL_RCC_GetSysClockFreq+0x160>)
 80022c6:	fb02 f106 	mul.w	r1, r2, r6
 80022ca:	2200      	movs	r2, #0
 80022cc:	fb02 f205 	mul.w	r2, r2, r5
 80022d0:	440a      	add	r2, r1
 80022d2:	493a      	ldr	r1, [pc, #232]	; (80023bc <HAL_RCC_GetSysClockFreq+0x160>)
 80022d4:	fba5 0101 	umull	r0, r1, r5, r1
 80022d8:	1853      	adds	r3, r2, r1
 80022da:	4619      	mov	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f04f 0400 	mov.w	r4, #0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4623      	mov	r3, r4
 80022e6:	f7fd ffc3 	bl	8000270 <__aeabi_uldivmod>
 80022ea:	4603      	mov	r3, r0
 80022ec:	460c      	mov	r4, r1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e049      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	099b      	lsrs	r3, r3, #6
 80022f8:	f04f 0400 	mov.w	r4, #0
 80022fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	ea03 0501 	and.w	r5, r3, r1
 8002308:	ea04 0602 	and.w	r6, r4, r2
 800230c:	4629      	mov	r1, r5
 800230e:	4632      	mov	r2, r6
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	f04f 0400 	mov.w	r4, #0
 8002318:	0154      	lsls	r4, r2, #5
 800231a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800231e:	014b      	lsls	r3, r1, #5
 8002320:	4619      	mov	r1, r3
 8002322:	4622      	mov	r2, r4
 8002324:	1b49      	subs	r1, r1, r5
 8002326:	eb62 0206 	sbc.w	r2, r2, r6
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f04f 0400 	mov.w	r4, #0
 8002332:	0194      	lsls	r4, r2, #6
 8002334:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002338:	018b      	lsls	r3, r1, #6
 800233a:	1a5b      	subs	r3, r3, r1
 800233c:	eb64 0402 	sbc.w	r4, r4, r2
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	00e2      	lsls	r2, r4, #3
 800234a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800234e:	00d9      	lsls	r1, r3, #3
 8002350:	460b      	mov	r3, r1
 8002352:	4614      	mov	r4, r2
 8002354:	195b      	adds	r3, r3, r5
 8002356:	eb44 0406 	adc.w	r4, r4, r6
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	02a2      	lsls	r2, r4, #10
 8002364:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002368:	0299      	lsls	r1, r3, #10
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	4618      	mov	r0, r3
 8002370:	4621      	mov	r1, r4
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f04f 0400 	mov.w	r4, #0
 8002378:	461a      	mov	r2, r3
 800237a:	4623      	mov	r3, r4
 800237c:	f7fd ff78 	bl	8000270 <__aeabi_uldivmod>
 8002380:	4603      	mov	r3, r0
 8002382:	460c      	mov	r4, r1
 8002384:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	3301      	adds	r3, #1
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	60bb      	str	r3, [r7, #8]
      break;
 80023a0:	e002      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023a4:	60bb      	str	r3, [r7, #8]
      break;
 80023a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a8:	68bb      	ldr	r3, [r7, #8]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	017d7840 	.word	0x017d7840

080023c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e056      	b.n	8002480 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe fb2b 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002408:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	ea42 0103 	orr.w	r1, r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0104 	and.w	r1, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_SPI_Transmit+0x22>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e11e      	b.n	80026e8 <HAL_SPI_Transmit+0x260>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b2:	f7fe fc85 	bl	8000dc0 <HAL_GetTick>
 80024b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d002      	beq.n	80024ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
 80024ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024cc:	e103      	b.n	80026d6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_SPI_Transmit+0x52>
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024de:	e0fa      	b.n	80026d6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2203      	movs	r2, #3
 80024e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	88fa      	ldrh	r2, [r7, #6]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002526:	d107      	bne.n	8002538 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002536:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d007      	beq.n	8002556 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800255e:	d14b      	bne.n	80025f8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_SPI_Transmit+0xe6>
 8002568:	8afb      	ldrh	r3, [r7, #22]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d13e      	bne.n	80025ec <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	1c9a      	adds	r2, r3, #2
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002592:	e02b      	b.n	80025ec <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d112      	bne.n	80025c8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	1c9a      	adds	r2, r3, #2
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80025c6:	e011      	b.n	80025ec <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c8:	f7fe fbfa 	bl	8000dc0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d803      	bhi.n	80025e0 <HAL_SPI_Transmit+0x158>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d102      	bne.n	80025e6 <HAL_SPI_Transmit+0x15e>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025ea:	e074      	b.n	80026d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ce      	bne.n	8002594 <HAL_SPI_Transmit+0x10c>
 80025f6:	e04c      	b.n	8002692 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_SPI_Transmit+0x17e>
 8002600:	8afb      	ldrh	r3, [r7, #22]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d140      	bne.n	8002688 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800262c:	e02c      	b.n	8002688 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d113      	bne.n	8002664 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	86da      	strh	r2, [r3, #54]	; 0x36
 8002662:	e011      	b.n	8002688 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002664:	f7fe fbac 	bl	8000dc0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d803      	bhi.n	800267c <HAL_SPI_Transmit+0x1f4>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d102      	bne.n	8002682 <HAL_SPI_Transmit+0x1fa>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002686:	e026      	b.n	80026d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1cd      	bne.n	800262e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	6839      	ldr	r1, [r7, #0]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f894 	bl	80027c4 <SPI_EndRxTxTransaction>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	77fb      	strb	r3, [r7, #31]
 80026d2:	e000      	b.n	80026d6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80026d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002700:	e04c      	b.n	800279c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002708:	d048      	beq.n	800279c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800270a:	f7fe fb59 	bl	8000dc0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d902      	bls.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x30>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d13d      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800272e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002738:	d111      	bne.n	800275e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002742:	d004      	beq.n	800274e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d107      	bne.n	800275e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002766:	d10f      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e00f      	b.n	80027bc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d1a3      	bne.n	8002702 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <SPI_EndRxTxTransaction+0x7c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <SPI_EndRxTxTransaction+0x80>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0d5b      	lsrs	r3, r3, #21
 80027dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ee:	d112      	bne.n	8002816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff ff78 	bl	80026f0 <SPI_WaitFlagStateUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0220 	orr.w	r2, r3, #32
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00f      	b.n	8002836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3b01      	subs	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d0f2      	beq.n	8002816 <SPI_EndRxTxTransaction+0x52>
 8002830:	e000      	b.n	8002834 <SPI_EndRxTxTransaction+0x70>
        break;
 8002832:	bf00      	nop
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000000 	.word	0x20000000
 8002844:	165e9f81 	.word	0x165e9f81

08002848 <pot>:
#include "main.h"

ADC_HandleTypeDef hadc1;

uint32_t pot()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
	volatile int a;
	HAL_ADC_Start(&hadc1);
 800284e:	480b      	ldr	r0, [pc, #44]	; (800287c <pot+0x34>)
 8002850:	f7fe fb28 	bl	8000ea4 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 5)==HAL_OK)
 8002854:	2105      	movs	r1, #5
 8002856:	4809      	ldr	r0, [pc, #36]	; (800287c <pot+0x34>)
 8002858:	f7fe fbea 	bl	8001030 <HAL_ADC_PollForConversion>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d104      	bne.n	800286c <pot+0x24>
	{
	  	 a=HAL_ADC_GetValue(&hadc1);
 8002862:	4806      	ldr	r0, [pc, #24]	; (800287c <pot+0x34>)
 8002864:	f7fe fc68 	bl	8001138 <HAL_ADC_GetValue>
 8002868:	4603      	mov	r3, r0
 800286a:	607b      	str	r3, [r7, #4]
	 }
	 HAL_Delay(50);
 800286c:	2032      	movs	r0, #50	; 0x32
 800286e:	f7fe fab3 	bl	8000dd8 <HAL_Delay>
	return a;
 8002872:	687b      	ldr	r3, [r7, #4]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000009c 	.word	0x2000009c

08002880 <pir>:




int pir()
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	 if(HAL_GPIO_ReadPin(pir_sensor_GPIO_Port, pir_sensor_Pin))
 8002884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <pir+0x28>)
 800288a:	f7ff f92d 	bl	8001ae8 <HAL_GPIO_ReadPin>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <pir+0x20>
	 {
	  //HAL_GPIO_WritePin();
	 //while (HAL_GPIO_ReadPin(PIRVALUE_01_GPIO_Port, PIRVALUE_01_Pin));
	  HAL_Delay(1000);
 8002894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002898:	f7fe fa9e 	bl	8000dd8 <HAL_Delay>
	  //HAL_GPIO_WritePin(LED_OUTPUT_GPIO_Port, LED_OUTPUT_Pin, 0);
	  return 1;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <pir+0x22>
	  while(HAL_GPIO_ReadPin(pir_sensor_GPIO_Port,pir_sensor_Pin));
	 }
	 return 0;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40020c00 	.word	0x40020c00

080028ac <__errno>:
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <__errno+0x8>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	4e0d      	ldr	r6, [pc, #52]	; (80028f0 <__libc_init_array+0x38>)
 80028bc:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <__libc_init_array+0x3c>)
 80028be:	1ba4      	subs	r4, r4, r6
 80028c0:	10a4      	asrs	r4, r4, #2
 80028c2:	2500      	movs	r5, #0
 80028c4:	42a5      	cmp	r5, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	4e0b      	ldr	r6, [pc, #44]	; (80028f8 <__libc_init_array+0x40>)
 80028ca:	4c0c      	ldr	r4, [pc, #48]	; (80028fc <__libc_init_array+0x44>)
 80028cc:	f000 ff04 	bl	80036d8 <_init>
 80028d0:	1ba4      	subs	r4, r4, r6
 80028d2:	10a4      	asrs	r4, r4, #2
 80028d4:	2500      	movs	r5, #0
 80028d6:	42a5      	cmp	r5, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e0:	4798      	blx	r3
 80028e2:	3501      	adds	r5, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ea:	4798      	blx	r3
 80028ec:	3501      	adds	r5, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	0800381c 	.word	0x0800381c
 80028f4:	0800381c 	.word	0x0800381c
 80028f8:	0800381c 	.word	0x0800381c
 80028fc:	08003820 	.word	0x08003820

08002900 <memset>:
 8002900:	4402      	add	r2, r0
 8002902:	4603      	mov	r3, r0
 8002904:	4293      	cmp	r3, r2
 8002906:	d100      	bne.n	800290a <memset+0xa>
 8002908:	4770      	bx	lr
 800290a:	f803 1b01 	strb.w	r1, [r3], #1
 800290e:	e7f9      	b.n	8002904 <memset+0x4>

08002910 <iprintf>:
 8002910:	b40f      	push	{r0, r1, r2, r3}
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <iprintf+0x2c>)
 8002914:	b513      	push	{r0, r1, r4, lr}
 8002916:	681c      	ldr	r4, [r3, #0]
 8002918:	b124      	cbz	r4, 8002924 <iprintf+0x14>
 800291a:	69a3      	ldr	r3, [r4, #24]
 800291c:	b913      	cbnz	r3, 8002924 <iprintf+0x14>
 800291e:	4620      	mov	r0, r4
 8002920:	f000 f84e 	bl	80029c0 <__sinit>
 8002924:	ab05      	add	r3, sp, #20
 8002926:	9a04      	ldr	r2, [sp, #16]
 8002928:	68a1      	ldr	r1, [r4, #8]
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	4620      	mov	r0, r4
 800292e:	f000 f955 	bl	8002bdc <_vfiprintf_r>
 8002932:	b002      	add	sp, #8
 8002934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002938:	b004      	add	sp, #16
 800293a:	4770      	bx	lr
 800293c:	2000000c 	.word	0x2000000c

08002940 <std>:
 8002940:	2300      	movs	r3, #0
 8002942:	b510      	push	{r4, lr}
 8002944:	4604      	mov	r4, r0
 8002946:	e9c0 3300 	strd	r3, r3, [r0]
 800294a:	6083      	str	r3, [r0, #8]
 800294c:	8181      	strh	r1, [r0, #12]
 800294e:	6643      	str	r3, [r0, #100]	; 0x64
 8002950:	81c2      	strh	r2, [r0, #14]
 8002952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002956:	6183      	str	r3, [r0, #24]
 8002958:	4619      	mov	r1, r3
 800295a:	2208      	movs	r2, #8
 800295c:	305c      	adds	r0, #92	; 0x5c
 800295e:	f7ff ffcf 	bl	8002900 <memset>
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <std+0x38>)
 8002964:	6263      	str	r3, [r4, #36]	; 0x24
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <std+0x3c>)
 8002968:	62a3      	str	r3, [r4, #40]	; 0x28
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <std+0x40>)
 800296c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <std+0x44>)
 8002970:	6224      	str	r4, [r4, #32]
 8002972:	6323      	str	r3, [r4, #48]	; 0x30
 8002974:	bd10      	pop	{r4, pc}
 8002976:	bf00      	nop
 8002978:	08003139 	.word	0x08003139
 800297c:	0800315b 	.word	0x0800315b
 8002980:	08003193 	.word	0x08003193
 8002984:	080031b7 	.word	0x080031b7

08002988 <_cleanup_r>:
 8002988:	4901      	ldr	r1, [pc, #4]	; (8002990 <_cleanup_r+0x8>)
 800298a:	f000 b885 	b.w	8002a98 <_fwalk_reent>
 800298e:	bf00      	nop
 8002990:	08003491 	.word	0x08003491

08002994 <__sfmoreglue>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	1e4a      	subs	r2, r1, #1
 8002998:	2568      	movs	r5, #104	; 0x68
 800299a:	4355      	muls	r5, r2
 800299c:	460e      	mov	r6, r1
 800299e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029a2:	f000 f897 	bl	8002ad4 <_malloc_r>
 80029a6:	4604      	mov	r4, r0
 80029a8:	b140      	cbz	r0, 80029bc <__sfmoreglue+0x28>
 80029aa:	2100      	movs	r1, #0
 80029ac:	e9c0 1600 	strd	r1, r6, [r0]
 80029b0:	300c      	adds	r0, #12
 80029b2:	60a0      	str	r0, [r4, #8]
 80029b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029b8:	f7ff ffa2 	bl	8002900 <memset>
 80029bc:	4620      	mov	r0, r4
 80029be:	bd70      	pop	{r4, r5, r6, pc}

080029c0 <__sinit>:
 80029c0:	6983      	ldr	r3, [r0, #24]
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
 80029c6:	bb33      	cbnz	r3, 8002a16 <__sinit+0x56>
 80029c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80029cc:	6503      	str	r3, [r0, #80]	; 0x50
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <__sinit+0x58>)
 80029d0:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <__sinit+0x5c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6282      	str	r2, [r0, #40]	; 0x28
 80029d6:	4298      	cmp	r0, r3
 80029d8:	bf04      	itt	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	6183      	streq	r3, [r0, #24]
 80029de:	f000 f81f 	bl	8002a20 <__sfp>
 80029e2:	6060      	str	r0, [r4, #4]
 80029e4:	4620      	mov	r0, r4
 80029e6:	f000 f81b 	bl	8002a20 <__sfp>
 80029ea:	60a0      	str	r0, [r4, #8]
 80029ec:	4620      	mov	r0, r4
 80029ee:	f000 f817 	bl	8002a20 <__sfp>
 80029f2:	2200      	movs	r2, #0
 80029f4:	60e0      	str	r0, [r4, #12]
 80029f6:	2104      	movs	r1, #4
 80029f8:	6860      	ldr	r0, [r4, #4]
 80029fa:	f7ff ffa1 	bl	8002940 <std>
 80029fe:	2201      	movs	r2, #1
 8002a00:	2109      	movs	r1, #9
 8002a02:	68a0      	ldr	r0, [r4, #8]
 8002a04:	f7ff ff9c 	bl	8002940 <std>
 8002a08:	2202      	movs	r2, #2
 8002a0a:	2112      	movs	r1, #18
 8002a0c:	68e0      	ldr	r0, [r4, #12]
 8002a0e:	f7ff ff97 	bl	8002940 <std>
 8002a12:	2301      	movs	r3, #1
 8002a14:	61a3      	str	r3, [r4, #24]
 8002a16:	bd10      	pop	{r4, pc}
 8002a18:	0800377c 	.word	0x0800377c
 8002a1c:	08002989 	.word	0x08002989

08002a20 <__sfp>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <__sfp+0x70>)
 8002a24:	681e      	ldr	r6, [r3, #0]
 8002a26:	69b3      	ldr	r3, [r6, #24]
 8002a28:	4607      	mov	r7, r0
 8002a2a:	b913      	cbnz	r3, 8002a32 <__sfp+0x12>
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f7ff ffc7 	bl	80029c0 <__sinit>
 8002a32:	3648      	adds	r6, #72	; 0x48
 8002a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	d503      	bpl.n	8002a44 <__sfp+0x24>
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	b133      	cbz	r3, 8002a4e <__sfp+0x2e>
 8002a40:	6836      	ldr	r6, [r6, #0]
 8002a42:	e7f7      	b.n	8002a34 <__sfp+0x14>
 8002a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a48:	b16d      	cbz	r5, 8002a66 <__sfp+0x46>
 8002a4a:	3468      	adds	r4, #104	; 0x68
 8002a4c:	e7f4      	b.n	8002a38 <__sfp+0x18>
 8002a4e:	2104      	movs	r1, #4
 8002a50:	4638      	mov	r0, r7
 8002a52:	f7ff ff9f 	bl	8002994 <__sfmoreglue>
 8002a56:	6030      	str	r0, [r6, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d1f1      	bne.n	8002a40 <__sfp+0x20>
 8002a5c:	230c      	movs	r3, #12
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4604      	mov	r4, r0
 8002a62:	4620      	mov	r0, r4
 8002a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <__sfp+0x74>)
 8002a68:	6665      	str	r5, [r4, #100]	; 0x64
 8002a6a:	e9c4 5500 	strd	r5, r5, [r4]
 8002a6e:	60a5      	str	r5, [r4, #8]
 8002a70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002a74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a80:	f7ff ff3e 	bl	8002900 <memset>
 8002a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a8c:	e7e9      	b.n	8002a62 <__sfp+0x42>
 8002a8e:	bf00      	nop
 8002a90:	0800377c 	.word	0x0800377c
 8002a94:	ffff0001 	.word	0xffff0001

08002a98 <_fwalk_reent>:
 8002a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	4680      	mov	r8, r0
 8002a9e:	4689      	mov	r9, r1
 8002aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002aa4:	2600      	movs	r6, #0
 8002aa6:	b914      	cbnz	r4, 8002aae <_fwalk_reent+0x16>
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002ab2:	3f01      	subs	r7, #1
 8002ab4:	d501      	bpl.n	8002aba <_fwalk_reent+0x22>
 8002ab6:	6824      	ldr	r4, [r4, #0]
 8002ab8:	e7f5      	b.n	8002aa6 <_fwalk_reent+0xe>
 8002aba:	89ab      	ldrh	r3, [r5, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d907      	bls.n	8002ad0 <_fwalk_reent+0x38>
 8002ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d003      	beq.n	8002ad0 <_fwalk_reent+0x38>
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4640      	mov	r0, r8
 8002acc:	47c8      	blx	r9
 8002ace:	4306      	orrs	r6, r0
 8002ad0:	3568      	adds	r5, #104	; 0x68
 8002ad2:	e7ee      	b.n	8002ab2 <_fwalk_reent+0x1a>

08002ad4 <_malloc_r>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	1ccd      	adds	r5, r1, #3
 8002ad8:	f025 0503 	bic.w	r5, r5, #3
 8002adc:	3508      	adds	r5, #8
 8002ade:	2d0c      	cmp	r5, #12
 8002ae0:	bf38      	it	cc
 8002ae2:	250c      	movcc	r5, #12
 8002ae4:	2d00      	cmp	r5, #0
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	db01      	blt.n	8002aee <_malloc_r+0x1a>
 8002aea:	42a9      	cmp	r1, r5
 8002aec:	d903      	bls.n	8002af6 <_malloc_r+0x22>
 8002aee:	230c      	movs	r3, #12
 8002af0:	6033      	str	r3, [r6, #0]
 8002af2:	2000      	movs	r0, #0
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	f000 fd6b 	bl	80035d0 <__malloc_lock>
 8002afa:	4a21      	ldr	r2, [pc, #132]	; (8002b80 <_malloc_r+0xac>)
 8002afc:	6814      	ldr	r4, [r2, #0]
 8002afe:	4621      	mov	r1, r4
 8002b00:	b991      	cbnz	r1, 8002b28 <_malloc_r+0x54>
 8002b02:	4c20      	ldr	r4, [pc, #128]	; (8002b84 <_malloc_r+0xb0>)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	b91b      	cbnz	r3, 8002b10 <_malloc_r+0x3c>
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 fb05 	bl	8003118 <_sbrk_r>
 8002b0e:	6020      	str	r0, [r4, #0]
 8002b10:	4629      	mov	r1, r5
 8002b12:	4630      	mov	r0, r6
 8002b14:	f000 fb00 	bl	8003118 <_sbrk_r>
 8002b18:	1c43      	adds	r3, r0, #1
 8002b1a:	d124      	bne.n	8002b66 <_malloc_r+0x92>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	4630      	mov	r0, r6
 8002b22:	f000 fd56 	bl	80035d2 <__malloc_unlock>
 8002b26:	e7e4      	b.n	8002af2 <_malloc_r+0x1e>
 8002b28:	680b      	ldr	r3, [r1, #0]
 8002b2a:	1b5b      	subs	r3, r3, r5
 8002b2c:	d418      	bmi.n	8002b60 <_malloc_r+0x8c>
 8002b2e:	2b0b      	cmp	r3, #11
 8002b30:	d90f      	bls.n	8002b52 <_malloc_r+0x7e>
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	50cd      	str	r5, [r1, r3]
 8002b36:	18cc      	adds	r4, r1, r3
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f000 fd4a 	bl	80035d2 <__malloc_unlock>
 8002b3e:	f104 000b 	add.w	r0, r4, #11
 8002b42:	1d23      	adds	r3, r4, #4
 8002b44:	f020 0007 	bic.w	r0, r0, #7
 8002b48:	1ac3      	subs	r3, r0, r3
 8002b4a:	d0d3      	beq.n	8002af4 <_malloc_r+0x20>
 8002b4c:	425a      	negs	r2, r3
 8002b4e:	50e2      	str	r2, [r4, r3]
 8002b50:	e7d0      	b.n	8002af4 <_malloc_r+0x20>
 8002b52:	428c      	cmp	r4, r1
 8002b54:	684b      	ldr	r3, [r1, #4]
 8002b56:	bf16      	itet	ne
 8002b58:	6063      	strne	r3, [r4, #4]
 8002b5a:	6013      	streq	r3, [r2, #0]
 8002b5c:	460c      	movne	r4, r1
 8002b5e:	e7eb      	b.n	8002b38 <_malloc_r+0x64>
 8002b60:	460c      	mov	r4, r1
 8002b62:	6849      	ldr	r1, [r1, #4]
 8002b64:	e7cc      	b.n	8002b00 <_malloc_r+0x2c>
 8002b66:	1cc4      	adds	r4, r0, #3
 8002b68:	f024 0403 	bic.w	r4, r4, #3
 8002b6c:	42a0      	cmp	r0, r4
 8002b6e:	d005      	beq.n	8002b7c <_malloc_r+0xa8>
 8002b70:	1a21      	subs	r1, r4, r0
 8002b72:	4630      	mov	r0, r6
 8002b74:	f000 fad0 	bl	8003118 <_sbrk_r>
 8002b78:	3001      	adds	r0, #1
 8002b7a:	d0cf      	beq.n	8002b1c <_malloc_r+0x48>
 8002b7c:	6025      	str	r5, [r4, #0]
 8002b7e:	e7db      	b.n	8002b38 <_malloc_r+0x64>
 8002b80:	20000094 	.word	0x20000094
 8002b84:	20000098 	.word	0x20000098

08002b88 <__sfputc_r>:
 8002b88:	6893      	ldr	r3, [r2, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	b410      	push	{r4}
 8002b90:	6093      	str	r3, [r2, #8]
 8002b92:	da08      	bge.n	8002ba6 <__sfputc_r+0x1e>
 8002b94:	6994      	ldr	r4, [r2, #24]
 8002b96:	42a3      	cmp	r3, r4
 8002b98:	db01      	blt.n	8002b9e <__sfputc_r+0x16>
 8002b9a:	290a      	cmp	r1, #10
 8002b9c:	d103      	bne.n	8002ba6 <__sfputc_r+0x1e>
 8002b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ba2:	f000 bb0d 	b.w	80031c0 <__swbuf_r>
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	1c58      	adds	r0, r3, #1
 8002baa:	6010      	str	r0, [r2, #0]
 8002bac:	7019      	strb	r1, [r3, #0]
 8002bae:	4608      	mov	r0, r1
 8002bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <__sfputs_r>:
 8002bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb8:	4606      	mov	r6, r0
 8002bba:	460f      	mov	r7, r1
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	18d5      	adds	r5, r2, r3
 8002bc0:	42ac      	cmp	r4, r5
 8002bc2:	d101      	bne.n	8002bc8 <__sfputs_r+0x12>
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	e007      	b.n	8002bd8 <__sfputs_r+0x22>
 8002bc8:	463a      	mov	r2, r7
 8002bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bce:	4630      	mov	r0, r6
 8002bd0:	f7ff ffda 	bl	8002b88 <__sfputc_r>
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	d1f3      	bne.n	8002bc0 <__sfputs_r+0xa>
 8002bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002bdc <_vfiprintf_r>:
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	460c      	mov	r4, r1
 8002be2:	b09d      	sub	sp, #116	; 0x74
 8002be4:	4617      	mov	r7, r2
 8002be6:	461d      	mov	r5, r3
 8002be8:	4606      	mov	r6, r0
 8002bea:	b118      	cbz	r0, 8002bf4 <_vfiprintf_r+0x18>
 8002bec:	6983      	ldr	r3, [r0, #24]
 8002bee:	b90b      	cbnz	r3, 8002bf4 <_vfiprintf_r+0x18>
 8002bf0:	f7ff fee6 	bl	80029c0 <__sinit>
 8002bf4:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <_vfiprintf_r+0x20c>)
 8002bf6:	429c      	cmp	r4, r3
 8002bf8:	d158      	bne.n	8002cac <_vfiprintf_r+0xd0>
 8002bfa:	6874      	ldr	r4, [r6, #4]
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	0718      	lsls	r0, r3, #28
 8002c00:	d55e      	bpl.n	8002cc0 <_vfiprintf_r+0xe4>
 8002c02:	6923      	ldr	r3, [r4, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d05b      	beq.n	8002cc0 <_vfiprintf_r+0xe4>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c12:	2330      	movs	r3, #48	; 0x30
 8002c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c18:	9503      	str	r5, [sp, #12]
 8002c1a:	f04f 0b01 	mov.w	fp, #1
 8002c1e:	46b8      	mov	r8, r7
 8002c20:	4645      	mov	r5, r8
 8002c22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c26:	b10b      	cbz	r3, 8002c2c <_vfiprintf_r+0x50>
 8002c28:	2b25      	cmp	r3, #37	; 0x25
 8002c2a:	d154      	bne.n	8002cd6 <_vfiprintf_r+0xfa>
 8002c2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002c30:	d00b      	beq.n	8002c4a <_vfiprintf_r+0x6e>
 8002c32:	4653      	mov	r3, sl
 8002c34:	463a      	mov	r2, r7
 8002c36:	4621      	mov	r1, r4
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f7ff ffbc 	bl	8002bb6 <__sfputs_r>
 8002c3e:	3001      	adds	r0, #1
 8002c40:	f000 80c2 	beq.w	8002dc8 <_vfiprintf_r+0x1ec>
 8002c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c46:	4453      	add	r3, sl
 8002c48:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4a:	f898 3000 	ldrb.w	r3, [r8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80ba 	beq.w	8002dc8 <_vfiprintf_r+0x1ec>
 8002c54:	2300      	movs	r3, #0
 8002c56:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c5e:	9304      	str	r3, [sp, #16]
 8002c60:	9307      	str	r3, [sp, #28]
 8002c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c66:	931a      	str	r3, [sp, #104]	; 0x68
 8002c68:	46a8      	mov	r8, r5
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002c70:	485e      	ldr	r0, [pc, #376]	; (8002dec <_vfiprintf_r+0x210>)
 8002c72:	f7fd faad 	bl	80001d0 <memchr>
 8002c76:	9b04      	ldr	r3, [sp, #16]
 8002c78:	bb78      	cbnz	r0, 8002cda <_vfiprintf_r+0xfe>
 8002c7a:	06d9      	lsls	r1, r3, #27
 8002c7c:	bf44      	itt	mi
 8002c7e:	2220      	movmi	r2, #32
 8002c80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c84:	071a      	lsls	r2, r3, #28
 8002c86:	bf44      	itt	mi
 8002c88:	222b      	movmi	r2, #43	; 0x2b
 8002c8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c8e:	782a      	ldrb	r2, [r5, #0]
 8002c90:	2a2a      	cmp	r2, #42	; 0x2a
 8002c92:	d02a      	beq.n	8002cea <_vfiprintf_r+0x10e>
 8002c94:	9a07      	ldr	r2, [sp, #28]
 8002c96:	46a8      	mov	r8, r5
 8002c98:	2000      	movs	r0, #0
 8002c9a:	250a      	movs	r5, #10
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ca2:	3b30      	subs	r3, #48	; 0x30
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	d969      	bls.n	8002d7c <_vfiprintf_r+0x1a0>
 8002ca8:	b360      	cbz	r0, 8002d04 <_vfiprintf_r+0x128>
 8002caa:	e024      	b.n	8002cf6 <_vfiprintf_r+0x11a>
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <_vfiprintf_r+0x214>)
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	d101      	bne.n	8002cb6 <_vfiprintf_r+0xda>
 8002cb2:	68b4      	ldr	r4, [r6, #8]
 8002cb4:	e7a2      	b.n	8002bfc <_vfiprintf_r+0x20>
 8002cb6:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <_vfiprintf_r+0x218>)
 8002cb8:	429c      	cmp	r4, r3
 8002cba:	bf08      	it	eq
 8002cbc:	68f4      	ldreq	r4, [r6, #12]
 8002cbe:	e79d      	b.n	8002bfc <_vfiprintf_r+0x20>
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f000 fae0 	bl	8003288 <__swsetup_r>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d09d      	beq.n	8002c08 <_vfiprintf_r+0x2c>
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	b01d      	add	sp, #116	; 0x74
 8002cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd6:	46a8      	mov	r8, r5
 8002cd8:	e7a2      	b.n	8002c20 <_vfiprintf_r+0x44>
 8002cda:	4a44      	ldr	r2, [pc, #272]	; (8002dec <_vfiprintf_r+0x210>)
 8002cdc:	1a80      	subs	r0, r0, r2
 8002cde:	fa0b f000 	lsl.w	r0, fp, r0
 8002ce2:	4318      	orrs	r0, r3
 8002ce4:	9004      	str	r0, [sp, #16]
 8002ce6:	4645      	mov	r5, r8
 8002ce8:	e7be      	b.n	8002c68 <_vfiprintf_r+0x8c>
 8002cea:	9a03      	ldr	r2, [sp, #12]
 8002cec:	1d11      	adds	r1, r2, #4
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	9103      	str	r1, [sp, #12]
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	db01      	blt.n	8002cfa <_vfiprintf_r+0x11e>
 8002cf6:	9207      	str	r2, [sp, #28]
 8002cf8:	e004      	b.n	8002d04 <_vfiprintf_r+0x128>
 8002cfa:	4252      	negs	r2, r2
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	9207      	str	r2, [sp, #28]
 8002d02:	9304      	str	r3, [sp, #16]
 8002d04:	f898 3000 	ldrb.w	r3, [r8]
 8002d08:	2b2e      	cmp	r3, #46	; 0x2e
 8002d0a:	d10e      	bne.n	8002d2a <_vfiprintf_r+0x14e>
 8002d0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002d10:	2b2a      	cmp	r3, #42	; 0x2a
 8002d12:	d138      	bne.n	8002d86 <_vfiprintf_r+0x1aa>
 8002d14:	9b03      	ldr	r3, [sp, #12]
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	9203      	str	r2, [sp, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bfb8      	it	lt
 8002d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d24:	f108 0802 	add.w	r8, r8, #2
 8002d28:	9305      	str	r3, [sp, #20]
 8002d2a:	4d33      	ldr	r5, [pc, #204]	; (8002df8 <_vfiprintf_r+0x21c>)
 8002d2c:	f898 1000 	ldrb.w	r1, [r8]
 8002d30:	2203      	movs	r2, #3
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7fd fa4c 	bl	80001d0 <memchr>
 8002d38:	b140      	cbz	r0, 8002d4c <_vfiprintf_r+0x170>
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	1b40      	subs	r0, r0, r5
 8002d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8002d42:	9b04      	ldr	r3, [sp, #16]
 8002d44:	4303      	orrs	r3, r0
 8002d46:	f108 0801 	add.w	r8, r8, #1
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	f898 1000 	ldrb.w	r1, [r8]
 8002d50:	482a      	ldr	r0, [pc, #168]	; (8002dfc <_vfiprintf_r+0x220>)
 8002d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d56:	2206      	movs	r2, #6
 8002d58:	f108 0701 	add.w	r7, r8, #1
 8002d5c:	f7fd fa38 	bl	80001d0 <memchr>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d037      	beq.n	8002dd4 <_vfiprintf_r+0x1f8>
 8002d64:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <_vfiprintf_r+0x224>)
 8002d66:	bb1b      	cbnz	r3, 8002db0 <_vfiprintf_r+0x1d4>
 8002d68:	9b03      	ldr	r3, [sp, #12]
 8002d6a:	3307      	adds	r3, #7
 8002d6c:	f023 0307 	bic.w	r3, r3, #7
 8002d70:	3308      	adds	r3, #8
 8002d72:	9303      	str	r3, [sp, #12]
 8002d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d76:	444b      	add	r3, r9
 8002d78:	9309      	str	r3, [sp, #36]	; 0x24
 8002d7a:	e750      	b.n	8002c1e <_vfiprintf_r+0x42>
 8002d7c:	fb05 3202 	mla	r2, r5, r2, r3
 8002d80:	2001      	movs	r0, #1
 8002d82:	4688      	mov	r8, r1
 8002d84:	e78a      	b.n	8002c9c <_vfiprintf_r+0xc0>
 8002d86:	2300      	movs	r3, #0
 8002d88:	f108 0801 	add.w	r8, r8, #1
 8002d8c:	9305      	str	r3, [sp, #20]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	250a      	movs	r5, #10
 8002d92:	4640      	mov	r0, r8
 8002d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d98:	3a30      	subs	r2, #48	; 0x30
 8002d9a:	2a09      	cmp	r2, #9
 8002d9c:	d903      	bls.n	8002da6 <_vfiprintf_r+0x1ca>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0c3      	beq.n	8002d2a <_vfiprintf_r+0x14e>
 8002da2:	9105      	str	r1, [sp, #20]
 8002da4:	e7c1      	b.n	8002d2a <_vfiprintf_r+0x14e>
 8002da6:	fb05 2101 	mla	r1, r5, r1, r2
 8002daa:	2301      	movs	r3, #1
 8002dac:	4680      	mov	r8, r0
 8002dae:	e7f0      	b.n	8002d92 <_vfiprintf_r+0x1b6>
 8002db0:	ab03      	add	r3, sp, #12
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4622      	mov	r2, r4
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <_vfiprintf_r+0x228>)
 8002db8:	a904      	add	r1, sp, #16
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002dc4:	4681      	mov	r9, r0
 8002dc6:	d1d5      	bne.n	8002d74 <_vfiprintf_r+0x198>
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	065b      	lsls	r3, r3, #25
 8002dcc:	f53f af7e 	bmi.w	8002ccc <_vfiprintf_r+0xf0>
 8002dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dd2:	e77d      	b.n	8002cd0 <_vfiprintf_r+0xf4>
 8002dd4:	ab03      	add	r3, sp, #12
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4622      	mov	r2, r4
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <_vfiprintf_r+0x228>)
 8002ddc:	a904      	add	r1, sp, #16
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 f888 	bl	8002ef4 <_printf_i>
 8002de4:	e7ec      	b.n	8002dc0 <_vfiprintf_r+0x1e4>
 8002de6:	bf00      	nop
 8002de8:	080037a0 	.word	0x080037a0
 8002dec:	080037e0 	.word	0x080037e0
 8002df0:	080037c0 	.word	0x080037c0
 8002df4:	08003780 	.word	0x08003780
 8002df8:	080037e6 	.word	0x080037e6
 8002dfc:	080037ea 	.word	0x080037ea
 8002e00:	00000000 	.word	0x00000000
 8002e04:	08002bb7 	.word	0x08002bb7

08002e08 <_printf_common>:
 8002e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0c:	4691      	mov	r9, r2
 8002e0e:	461f      	mov	r7, r3
 8002e10:	688a      	ldr	r2, [r1, #8]
 8002e12:	690b      	ldr	r3, [r1, #16]
 8002e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bfb8      	it	lt
 8002e1c:	4613      	movlt	r3, r2
 8002e1e:	f8c9 3000 	str.w	r3, [r9]
 8002e22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e26:	4606      	mov	r6, r0
 8002e28:	460c      	mov	r4, r1
 8002e2a:	b112      	cbz	r2, 8002e32 <_printf_common+0x2a>
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8c9 3000 	str.w	r3, [r9]
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	0699      	lsls	r1, r3, #26
 8002e36:	bf42      	ittt	mi
 8002e38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e3c:	3302      	addmi	r3, #2
 8002e3e:	f8c9 3000 	strmi.w	r3, [r9]
 8002e42:	6825      	ldr	r5, [r4, #0]
 8002e44:	f015 0506 	ands.w	r5, r5, #6
 8002e48:	d107      	bne.n	8002e5a <_printf_common+0x52>
 8002e4a:	f104 0a19 	add.w	sl, r4, #25
 8002e4e:	68e3      	ldr	r3, [r4, #12]
 8002e50:	f8d9 2000 	ldr.w	r2, [r9]
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	42ab      	cmp	r3, r5
 8002e58:	dc28      	bgt.n	8002eac <_printf_common+0xa4>
 8002e5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e5e:	6822      	ldr	r2, [r4, #0]
 8002e60:	3300      	adds	r3, #0
 8002e62:	bf18      	it	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	0692      	lsls	r2, r2, #26
 8002e68:	d42d      	bmi.n	8002ec6 <_printf_common+0xbe>
 8002e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e6e:	4639      	mov	r1, r7
 8002e70:	4630      	mov	r0, r6
 8002e72:	47c0      	blx	r8
 8002e74:	3001      	adds	r0, #1
 8002e76:	d020      	beq.n	8002eba <_printf_common+0xb2>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	68e5      	ldr	r5, [r4, #12]
 8002e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8002e80:	f003 0306 	and.w	r3, r3, #6
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	bf08      	it	eq
 8002e88:	1aad      	subeq	r5, r5, r2
 8002e8a:	68a3      	ldr	r3, [r4, #8]
 8002e8c:	6922      	ldr	r2, [r4, #16]
 8002e8e:	bf0c      	ite	eq
 8002e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e94:	2500      	movne	r5, #0
 8002e96:	4293      	cmp	r3, r2
 8002e98:	bfc4      	itt	gt
 8002e9a:	1a9b      	subgt	r3, r3, r2
 8002e9c:	18ed      	addgt	r5, r5, r3
 8002e9e:	f04f 0900 	mov.w	r9, #0
 8002ea2:	341a      	adds	r4, #26
 8002ea4:	454d      	cmp	r5, r9
 8002ea6:	d11a      	bne.n	8002ede <_printf_common+0xd6>
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	e008      	b.n	8002ebe <_printf_common+0xb6>
 8002eac:	2301      	movs	r3, #1
 8002eae:	4652      	mov	r2, sl
 8002eb0:	4639      	mov	r1, r7
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	47c0      	blx	r8
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d103      	bne.n	8002ec2 <_printf_common+0xba>
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec2:	3501      	adds	r5, #1
 8002ec4:	e7c3      	b.n	8002e4e <_printf_common+0x46>
 8002ec6:	18e1      	adds	r1, r4, r3
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	2030      	movs	r0, #48	; 0x30
 8002ecc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ed0:	4422      	add	r2, r4
 8002ed2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eda:	3302      	adds	r3, #2
 8002edc:	e7c5      	b.n	8002e6a <_printf_common+0x62>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4622      	mov	r2, r4
 8002ee2:	4639      	mov	r1, r7
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	47c0      	blx	r8
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d0e6      	beq.n	8002eba <_printf_common+0xb2>
 8002eec:	f109 0901 	add.w	r9, r9, #1
 8002ef0:	e7d8      	b.n	8002ea4 <_printf_common+0x9c>
	...

08002ef4 <_printf_i>:
 8002ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ef8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002efc:	460c      	mov	r4, r1
 8002efe:	7e09      	ldrb	r1, [r1, #24]
 8002f00:	b085      	sub	sp, #20
 8002f02:	296e      	cmp	r1, #110	; 0x6e
 8002f04:	4617      	mov	r7, r2
 8002f06:	4606      	mov	r6, r0
 8002f08:	4698      	mov	r8, r3
 8002f0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f0c:	f000 80b3 	beq.w	8003076 <_printf_i+0x182>
 8002f10:	d822      	bhi.n	8002f58 <_printf_i+0x64>
 8002f12:	2963      	cmp	r1, #99	; 0x63
 8002f14:	d036      	beq.n	8002f84 <_printf_i+0x90>
 8002f16:	d80a      	bhi.n	8002f2e <_printf_i+0x3a>
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	f000 80b9 	beq.w	8003090 <_printf_i+0x19c>
 8002f1e:	2958      	cmp	r1, #88	; 0x58
 8002f20:	f000 8083 	beq.w	800302a <_printf_i+0x136>
 8002f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f2c:	e032      	b.n	8002f94 <_printf_i+0xa0>
 8002f2e:	2964      	cmp	r1, #100	; 0x64
 8002f30:	d001      	beq.n	8002f36 <_printf_i+0x42>
 8002f32:	2969      	cmp	r1, #105	; 0x69
 8002f34:	d1f6      	bne.n	8002f24 <_printf_i+0x30>
 8002f36:	6820      	ldr	r0, [r4, #0]
 8002f38:	6813      	ldr	r3, [r2, #0]
 8002f3a:	0605      	lsls	r5, r0, #24
 8002f3c:	f103 0104 	add.w	r1, r3, #4
 8002f40:	d52a      	bpl.n	8002f98 <_printf_i+0xa4>
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6011      	str	r1, [r2, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da03      	bge.n	8002f52 <_printf_i+0x5e>
 8002f4a:	222d      	movs	r2, #45	; 0x2d
 8002f4c:	425b      	negs	r3, r3
 8002f4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f52:	486f      	ldr	r0, [pc, #444]	; (8003110 <_printf_i+0x21c>)
 8002f54:	220a      	movs	r2, #10
 8002f56:	e039      	b.n	8002fcc <_printf_i+0xd8>
 8002f58:	2973      	cmp	r1, #115	; 0x73
 8002f5a:	f000 809d 	beq.w	8003098 <_printf_i+0x1a4>
 8002f5e:	d808      	bhi.n	8002f72 <_printf_i+0x7e>
 8002f60:	296f      	cmp	r1, #111	; 0x6f
 8002f62:	d020      	beq.n	8002fa6 <_printf_i+0xb2>
 8002f64:	2970      	cmp	r1, #112	; 0x70
 8002f66:	d1dd      	bne.n	8002f24 <_printf_i+0x30>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	6023      	str	r3, [r4, #0]
 8002f70:	e003      	b.n	8002f7a <_printf_i+0x86>
 8002f72:	2975      	cmp	r1, #117	; 0x75
 8002f74:	d017      	beq.n	8002fa6 <_printf_i+0xb2>
 8002f76:	2978      	cmp	r1, #120	; 0x78
 8002f78:	d1d4      	bne.n	8002f24 <_printf_i+0x30>
 8002f7a:	2378      	movs	r3, #120	; 0x78
 8002f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f80:	4864      	ldr	r0, [pc, #400]	; (8003114 <_printf_i+0x220>)
 8002f82:	e055      	b.n	8003030 <_printf_i+0x13c>
 8002f84:	6813      	ldr	r3, [r2, #0]
 8002f86:	1d19      	adds	r1, r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6011      	str	r1, [r2, #0]
 8002f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f94:	2301      	movs	r3, #1
 8002f96:	e08c      	b.n	80030b2 <_printf_i+0x1be>
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6011      	str	r1, [r2, #0]
 8002f9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fa0:	bf18      	it	ne
 8002fa2:	b21b      	sxthne	r3, r3
 8002fa4:	e7cf      	b.n	8002f46 <_printf_i+0x52>
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	6825      	ldr	r5, [r4, #0]
 8002faa:	1d18      	adds	r0, r3, #4
 8002fac:	6010      	str	r0, [r2, #0]
 8002fae:	0628      	lsls	r0, r5, #24
 8002fb0:	d501      	bpl.n	8002fb6 <_printf_i+0xc2>
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	e002      	b.n	8002fbc <_printf_i+0xc8>
 8002fb6:	0668      	lsls	r0, r5, #25
 8002fb8:	d5fb      	bpl.n	8002fb2 <_printf_i+0xbe>
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	4854      	ldr	r0, [pc, #336]	; (8003110 <_printf_i+0x21c>)
 8002fbe:	296f      	cmp	r1, #111	; 0x6f
 8002fc0:	bf14      	ite	ne
 8002fc2:	220a      	movne	r2, #10
 8002fc4:	2208      	moveq	r2, #8
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fcc:	6865      	ldr	r5, [r4, #4]
 8002fce:	60a5      	str	r5, [r4, #8]
 8002fd0:	2d00      	cmp	r5, #0
 8002fd2:	f2c0 8095 	blt.w	8003100 <_printf_i+0x20c>
 8002fd6:	6821      	ldr	r1, [r4, #0]
 8002fd8:	f021 0104 	bic.w	r1, r1, #4
 8002fdc:	6021      	str	r1, [r4, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d13d      	bne.n	800305e <_printf_i+0x16a>
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	f040 808e 	bne.w	8003104 <_printf_i+0x210>
 8002fe8:	4665      	mov	r5, ip
 8002fea:	2a08      	cmp	r2, #8
 8002fec:	d10b      	bne.n	8003006 <_printf_i+0x112>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	07db      	lsls	r3, r3, #31
 8002ff2:	d508      	bpl.n	8003006 <_printf_i+0x112>
 8002ff4:	6923      	ldr	r3, [r4, #16]
 8002ff6:	6862      	ldr	r2, [r4, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	bfde      	ittt	le
 8002ffc:	2330      	movle	r3, #48	; 0x30
 8002ffe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003002:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003006:	ebac 0305 	sub.w	r3, ip, r5
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	f8cd 8000 	str.w	r8, [sp]
 8003010:	463b      	mov	r3, r7
 8003012:	aa03      	add	r2, sp, #12
 8003014:	4621      	mov	r1, r4
 8003016:	4630      	mov	r0, r6
 8003018:	f7ff fef6 	bl	8002e08 <_printf_common>
 800301c:	3001      	adds	r0, #1
 800301e:	d14d      	bne.n	80030bc <_printf_i+0x1c8>
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	b005      	add	sp, #20
 8003026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800302a:	4839      	ldr	r0, [pc, #228]	; (8003110 <_printf_i+0x21c>)
 800302c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	6821      	ldr	r1, [r4, #0]
 8003034:	1d1d      	adds	r5, r3, #4
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6015      	str	r5, [r2, #0]
 800303a:	060a      	lsls	r2, r1, #24
 800303c:	d50b      	bpl.n	8003056 <_printf_i+0x162>
 800303e:	07ca      	lsls	r2, r1, #31
 8003040:	bf44      	itt	mi
 8003042:	f041 0120 	orrmi.w	r1, r1, #32
 8003046:	6021      	strmi	r1, [r4, #0]
 8003048:	b91b      	cbnz	r3, 8003052 <_printf_i+0x15e>
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	f022 0220 	bic.w	r2, r2, #32
 8003050:	6022      	str	r2, [r4, #0]
 8003052:	2210      	movs	r2, #16
 8003054:	e7b7      	b.n	8002fc6 <_printf_i+0xd2>
 8003056:	064d      	lsls	r5, r1, #25
 8003058:	bf48      	it	mi
 800305a:	b29b      	uxthmi	r3, r3
 800305c:	e7ef      	b.n	800303e <_printf_i+0x14a>
 800305e:	4665      	mov	r5, ip
 8003060:	fbb3 f1f2 	udiv	r1, r3, r2
 8003064:	fb02 3311 	mls	r3, r2, r1, r3
 8003068:	5cc3      	ldrb	r3, [r0, r3]
 800306a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800306e:	460b      	mov	r3, r1
 8003070:	2900      	cmp	r1, #0
 8003072:	d1f5      	bne.n	8003060 <_printf_i+0x16c>
 8003074:	e7b9      	b.n	8002fea <_printf_i+0xf6>
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	6825      	ldr	r5, [r4, #0]
 800307a:	6961      	ldr	r1, [r4, #20]
 800307c:	1d18      	adds	r0, r3, #4
 800307e:	6010      	str	r0, [r2, #0]
 8003080:	0628      	lsls	r0, r5, #24
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	d501      	bpl.n	800308a <_printf_i+0x196>
 8003086:	6019      	str	r1, [r3, #0]
 8003088:	e002      	b.n	8003090 <_printf_i+0x19c>
 800308a:	066a      	lsls	r2, r5, #25
 800308c:	d5fb      	bpl.n	8003086 <_printf_i+0x192>
 800308e:	8019      	strh	r1, [r3, #0]
 8003090:	2300      	movs	r3, #0
 8003092:	6123      	str	r3, [r4, #16]
 8003094:	4665      	mov	r5, ip
 8003096:	e7b9      	b.n	800300c <_printf_i+0x118>
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	1d19      	adds	r1, r3, #4
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	681d      	ldr	r5, [r3, #0]
 80030a0:	6862      	ldr	r2, [r4, #4]
 80030a2:	2100      	movs	r1, #0
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7fd f893 	bl	80001d0 <memchr>
 80030aa:	b108      	cbz	r0, 80030b0 <_printf_i+0x1bc>
 80030ac:	1b40      	subs	r0, r0, r5
 80030ae:	6060      	str	r0, [r4, #4]
 80030b0:	6863      	ldr	r3, [r4, #4]
 80030b2:	6123      	str	r3, [r4, #16]
 80030b4:	2300      	movs	r3, #0
 80030b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030ba:	e7a7      	b.n	800300c <_printf_i+0x118>
 80030bc:	6923      	ldr	r3, [r4, #16]
 80030be:	462a      	mov	r2, r5
 80030c0:	4639      	mov	r1, r7
 80030c2:	4630      	mov	r0, r6
 80030c4:	47c0      	blx	r8
 80030c6:	3001      	adds	r0, #1
 80030c8:	d0aa      	beq.n	8003020 <_printf_i+0x12c>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	079b      	lsls	r3, r3, #30
 80030ce:	d413      	bmi.n	80030f8 <_printf_i+0x204>
 80030d0:	68e0      	ldr	r0, [r4, #12]
 80030d2:	9b03      	ldr	r3, [sp, #12]
 80030d4:	4298      	cmp	r0, r3
 80030d6:	bfb8      	it	lt
 80030d8:	4618      	movlt	r0, r3
 80030da:	e7a3      	b.n	8003024 <_printf_i+0x130>
 80030dc:	2301      	movs	r3, #1
 80030de:	464a      	mov	r2, r9
 80030e0:	4639      	mov	r1, r7
 80030e2:	4630      	mov	r0, r6
 80030e4:	47c0      	blx	r8
 80030e6:	3001      	adds	r0, #1
 80030e8:	d09a      	beq.n	8003020 <_printf_i+0x12c>
 80030ea:	3501      	adds	r5, #1
 80030ec:	68e3      	ldr	r3, [r4, #12]
 80030ee:	9a03      	ldr	r2, [sp, #12]
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	42ab      	cmp	r3, r5
 80030f4:	dcf2      	bgt.n	80030dc <_printf_i+0x1e8>
 80030f6:	e7eb      	b.n	80030d0 <_printf_i+0x1dc>
 80030f8:	2500      	movs	r5, #0
 80030fa:	f104 0919 	add.w	r9, r4, #25
 80030fe:	e7f5      	b.n	80030ec <_printf_i+0x1f8>
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ac      	bne.n	800305e <_printf_i+0x16a>
 8003104:	7803      	ldrb	r3, [r0, #0]
 8003106:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800310a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800310e:	e76c      	b.n	8002fea <_printf_i+0xf6>
 8003110:	080037f1 	.word	0x080037f1
 8003114:	08003802 	.word	0x08003802

08003118 <_sbrk_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4c06      	ldr	r4, [pc, #24]	; (8003134 <_sbrk_r+0x1c>)
 800311c:	2300      	movs	r3, #0
 800311e:	4605      	mov	r5, r0
 8003120:	4608      	mov	r0, r1
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	f7fd fd7a 	bl	8000c1c <_sbrk>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d102      	bne.n	8003132 <_sbrk_r+0x1a>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	b103      	cbz	r3, 8003132 <_sbrk_r+0x1a>
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	20000140 	.word	0x20000140

08003138 <__sread>:
 8003138:	b510      	push	{r4, lr}
 800313a:	460c      	mov	r4, r1
 800313c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003140:	f000 fa96 	bl	8003670 <_read_r>
 8003144:	2800      	cmp	r0, #0
 8003146:	bfab      	itete	ge
 8003148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800314a:	89a3      	ldrhlt	r3, [r4, #12]
 800314c:	181b      	addge	r3, r3, r0
 800314e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003152:	bfac      	ite	ge
 8003154:	6563      	strge	r3, [r4, #84]	; 0x54
 8003156:	81a3      	strhlt	r3, [r4, #12]
 8003158:	bd10      	pop	{r4, pc}

0800315a <__swrite>:
 800315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	461f      	mov	r7, r3
 8003160:	898b      	ldrh	r3, [r1, #12]
 8003162:	05db      	lsls	r3, r3, #23
 8003164:	4605      	mov	r5, r0
 8003166:	460c      	mov	r4, r1
 8003168:	4616      	mov	r6, r2
 800316a:	d505      	bpl.n	8003178 <__swrite+0x1e>
 800316c:	2302      	movs	r3, #2
 800316e:	2200      	movs	r2, #0
 8003170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003174:	f000 f9b6 	bl	80034e4 <_lseek_r>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800317e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	4632      	mov	r2, r6
 8003186:	463b      	mov	r3, r7
 8003188:	4628      	mov	r0, r5
 800318a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800318e:	f000 b869 	b.w	8003264 <_write_r>

08003192 <__sseek>:
 8003192:	b510      	push	{r4, lr}
 8003194:	460c      	mov	r4, r1
 8003196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800319a:	f000 f9a3 	bl	80034e4 <_lseek_r>
 800319e:	1c43      	adds	r3, r0, #1
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	bf15      	itete	ne
 80031a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80031a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031ae:	81a3      	strheq	r3, [r4, #12]
 80031b0:	bf18      	it	ne
 80031b2:	81a3      	strhne	r3, [r4, #12]
 80031b4:	bd10      	pop	{r4, pc}

080031b6 <__sclose>:
 80031b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ba:	f000 b8d3 	b.w	8003364 <_close_r>
	...

080031c0 <__swbuf_r>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	460e      	mov	r6, r1
 80031c4:	4614      	mov	r4, r2
 80031c6:	4605      	mov	r5, r0
 80031c8:	b118      	cbz	r0, 80031d2 <__swbuf_r+0x12>
 80031ca:	6983      	ldr	r3, [r0, #24]
 80031cc:	b90b      	cbnz	r3, 80031d2 <__swbuf_r+0x12>
 80031ce:	f7ff fbf7 	bl	80029c0 <__sinit>
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <__swbuf_r+0x98>)
 80031d4:	429c      	cmp	r4, r3
 80031d6:	d12a      	bne.n	800322e <__swbuf_r+0x6e>
 80031d8:	686c      	ldr	r4, [r5, #4]
 80031da:	69a3      	ldr	r3, [r4, #24]
 80031dc:	60a3      	str	r3, [r4, #8]
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	071a      	lsls	r2, r3, #28
 80031e2:	d52e      	bpl.n	8003242 <__swbuf_r+0x82>
 80031e4:	6923      	ldr	r3, [r4, #16]
 80031e6:	b363      	cbz	r3, 8003242 <__swbuf_r+0x82>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	6820      	ldr	r0, [r4, #0]
 80031ec:	1ac0      	subs	r0, r0, r3
 80031ee:	6963      	ldr	r3, [r4, #20]
 80031f0:	b2f6      	uxtb	r6, r6
 80031f2:	4283      	cmp	r3, r0
 80031f4:	4637      	mov	r7, r6
 80031f6:	dc04      	bgt.n	8003202 <__swbuf_r+0x42>
 80031f8:	4621      	mov	r1, r4
 80031fa:	4628      	mov	r0, r5
 80031fc:	f000 f948 	bl	8003490 <_fflush_r>
 8003200:	bb28      	cbnz	r0, 800324e <__swbuf_r+0x8e>
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	3b01      	subs	r3, #1
 8003206:	60a3      	str	r3, [r4, #8]
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	6022      	str	r2, [r4, #0]
 800320e:	701e      	strb	r6, [r3, #0]
 8003210:	6963      	ldr	r3, [r4, #20]
 8003212:	3001      	adds	r0, #1
 8003214:	4283      	cmp	r3, r0
 8003216:	d004      	beq.n	8003222 <__swbuf_r+0x62>
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	07db      	lsls	r3, r3, #31
 800321c:	d519      	bpl.n	8003252 <__swbuf_r+0x92>
 800321e:	2e0a      	cmp	r6, #10
 8003220:	d117      	bne.n	8003252 <__swbuf_r+0x92>
 8003222:	4621      	mov	r1, r4
 8003224:	4628      	mov	r0, r5
 8003226:	f000 f933 	bl	8003490 <_fflush_r>
 800322a:	b190      	cbz	r0, 8003252 <__swbuf_r+0x92>
 800322c:	e00f      	b.n	800324e <__swbuf_r+0x8e>
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <__swbuf_r+0x9c>)
 8003230:	429c      	cmp	r4, r3
 8003232:	d101      	bne.n	8003238 <__swbuf_r+0x78>
 8003234:	68ac      	ldr	r4, [r5, #8]
 8003236:	e7d0      	b.n	80031da <__swbuf_r+0x1a>
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <__swbuf_r+0xa0>)
 800323a:	429c      	cmp	r4, r3
 800323c:	bf08      	it	eq
 800323e:	68ec      	ldreq	r4, [r5, #12]
 8003240:	e7cb      	b.n	80031da <__swbuf_r+0x1a>
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	f000 f81f 	bl	8003288 <__swsetup_r>
 800324a:	2800      	cmp	r0, #0
 800324c:	d0cc      	beq.n	80031e8 <__swbuf_r+0x28>
 800324e:	f04f 37ff 	mov.w	r7, #4294967295
 8003252:	4638      	mov	r0, r7
 8003254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003256:	bf00      	nop
 8003258:	080037a0 	.word	0x080037a0
 800325c:	080037c0 	.word	0x080037c0
 8003260:	08003780 	.word	0x08003780

08003264 <_write_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	4c07      	ldr	r4, [pc, #28]	; (8003284 <_write_r+0x20>)
 8003268:	4605      	mov	r5, r0
 800326a:	4608      	mov	r0, r1
 800326c:	4611      	mov	r1, r2
 800326e:	2200      	movs	r2, #0
 8003270:	6022      	str	r2, [r4, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f7fd fc82 	bl	8000b7c <_write>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d102      	bne.n	8003282 <_write_r+0x1e>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	b103      	cbz	r3, 8003282 <_write_r+0x1e>
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	20000140 	.word	0x20000140

08003288 <__swsetup_r>:
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <__swsetup_r+0xcc>)
 800328a:	b570      	push	{r4, r5, r6, lr}
 800328c:	681d      	ldr	r5, [r3, #0]
 800328e:	4606      	mov	r6, r0
 8003290:	460c      	mov	r4, r1
 8003292:	b125      	cbz	r5, 800329e <__swsetup_r+0x16>
 8003294:	69ab      	ldr	r3, [r5, #24]
 8003296:	b913      	cbnz	r3, 800329e <__swsetup_r+0x16>
 8003298:	4628      	mov	r0, r5
 800329a:	f7ff fb91 	bl	80029c0 <__sinit>
 800329e:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <__swsetup_r+0xd0>)
 80032a0:	429c      	cmp	r4, r3
 80032a2:	d10f      	bne.n	80032c4 <__swsetup_r+0x3c>
 80032a4:	686c      	ldr	r4, [r5, #4]
 80032a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	0715      	lsls	r5, r2, #28
 80032ae:	d42c      	bmi.n	800330a <__swsetup_r+0x82>
 80032b0:	06d0      	lsls	r0, r2, #27
 80032b2:	d411      	bmi.n	80032d8 <__swsetup_r+0x50>
 80032b4:	2209      	movs	r2, #9
 80032b6:	6032      	str	r2, [r6, #0]
 80032b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	f04f 30ff 	mov.w	r0, #4294967295
 80032c2:	e03e      	b.n	8003342 <__swsetup_r+0xba>
 80032c4:	4b25      	ldr	r3, [pc, #148]	; (800335c <__swsetup_r+0xd4>)
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d101      	bne.n	80032ce <__swsetup_r+0x46>
 80032ca:	68ac      	ldr	r4, [r5, #8]
 80032cc:	e7eb      	b.n	80032a6 <__swsetup_r+0x1e>
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <__swsetup_r+0xd8>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	bf08      	it	eq
 80032d4:	68ec      	ldreq	r4, [r5, #12]
 80032d6:	e7e6      	b.n	80032a6 <__swsetup_r+0x1e>
 80032d8:	0751      	lsls	r1, r2, #29
 80032da:	d512      	bpl.n	8003302 <__swsetup_r+0x7a>
 80032dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032de:	b141      	cbz	r1, 80032f2 <__swsetup_r+0x6a>
 80032e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032e4:	4299      	cmp	r1, r3
 80032e6:	d002      	beq.n	80032ee <__swsetup_r+0x66>
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 f973 	bl	80035d4 <_free_r>
 80032ee:	2300      	movs	r3, #0
 80032f0:	6363      	str	r3, [r4, #52]	; 0x34
 80032f2:	89a3      	ldrh	r3, [r4, #12]
 80032f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	2300      	movs	r3, #0
 80032fc:	6063      	str	r3, [r4, #4]
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	b94b      	cbnz	r3, 8003322 <__swsetup_r+0x9a>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003318:	d003      	beq.n	8003322 <__swsetup_r+0x9a>
 800331a:	4621      	mov	r1, r4
 800331c:	4630      	mov	r0, r6
 800331e:	f000 f917 	bl	8003550 <__smakebuf_r>
 8003322:	89a2      	ldrh	r2, [r4, #12]
 8003324:	f012 0301 	ands.w	r3, r2, #1
 8003328:	d00c      	beq.n	8003344 <__swsetup_r+0xbc>
 800332a:	2300      	movs	r3, #0
 800332c:	60a3      	str	r3, [r4, #8]
 800332e:	6963      	ldr	r3, [r4, #20]
 8003330:	425b      	negs	r3, r3
 8003332:	61a3      	str	r3, [r4, #24]
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	b953      	cbnz	r3, 800334e <__swsetup_r+0xc6>
 8003338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800333c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003340:	d1ba      	bne.n	80032b8 <__swsetup_r+0x30>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	0792      	lsls	r2, r2, #30
 8003346:	bf58      	it	pl
 8003348:	6963      	ldrpl	r3, [r4, #20]
 800334a:	60a3      	str	r3, [r4, #8]
 800334c:	e7f2      	b.n	8003334 <__swsetup_r+0xac>
 800334e:	2000      	movs	r0, #0
 8003350:	e7f7      	b.n	8003342 <__swsetup_r+0xba>
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c
 8003358:	080037a0 	.word	0x080037a0
 800335c:	080037c0 	.word	0x080037c0
 8003360:	08003780 	.word	0x08003780

08003364 <_close_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4c06      	ldr	r4, [pc, #24]	; (8003380 <_close_r+0x1c>)
 8003368:	2300      	movs	r3, #0
 800336a:	4605      	mov	r5, r0
 800336c:	4608      	mov	r0, r1
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	f7fd fc20 	bl	8000bb4 <_close>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_close_r+0x1a>
 8003378:	6823      	ldr	r3, [r4, #0]
 800337a:	b103      	cbz	r3, 800337e <_close_r+0x1a>
 800337c:	602b      	str	r3, [r5, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	20000140 	.word	0x20000140

08003384 <__sflush_r>:
 8003384:	898a      	ldrh	r2, [r1, #12]
 8003386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338a:	4605      	mov	r5, r0
 800338c:	0710      	lsls	r0, r2, #28
 800338e:	460c      	mov	r4, r1
 8003390:	d458      	bmi.n	8003444 <__sflush_r+0xc0>
 8003392:	684b      	ldr	r3, [r1, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	dc05      	bgt.n	80033a4 <__sflush_r+0x20>
 8003398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	dc02      	bgt.n	80033a4 <__sflush_r+0x20>
 800339e:	2000      	movs	r0, #0
 80033a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033a6:	2e00      	cmp	r6, #0
 80033a8:	d0f9      	beq.n	800339e <__sflush_r+0x1a>
 80033aa:	2300      	movs	r3, #0
 80033ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033b0:	682f      	ldr	r7, [r5, #0]
 80033b2:	6a21      	ldr	r1, [r4, #32]
 80033b4:	602b      	str	r3, [r5, #0]
 80033b6:	d032      	beq.n	800341e <__sflush_r+0x9a>
 80033b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	075a      	lsls	r2, r3, #29
 80033be:	d505      	bpl.n	80033cc <__sflush_r+0x48>
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	1ac0      	subs	r0, r0, r3
 80033c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033c6:	b10b      	cbz	r3, 80033cc <__sflush_r+0x48>
 80033c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ca:	1ac0      	subs	r0, r0, r3
 80033cc:	2300      	movs	r3, #0
 80033ce:	4602      	mov	r2, r0
 80033d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033d2:	6a21      	ldr	r1, [r4, #32]
 80033d4:	4628      	mov	r0, r5
 80033d6:	47b0      	blx	r6
 80033d8:	1c43      	adds	r3, r0, #1
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	d106      	bne.n	80033ec <__sflush_r+0x68>
 80033de:	6829      	ldr	r1, [r5, #0]
 80033e0:	291d      	cmp	r1, #29
 80033e2:	d848      	bhi.n	8003476 <__sflush_r+0xf2>
 80033e4:	4a29      	ldr	r2, [pc, #164]	; (800348c <__sflush_r+0x108>)
 80033e6:	40ca      	lsrs	r2, r1
 80033e8:	07d6      	lsls	r6, r2, #31
 80033ea:	d544      	bpl.n	8003476 <__sflush_r+0xf2>
 80033ec:	2200      	movs	r2, #0
 80033ee:	6062      	str	r2, [r4, #4]
 80033f0:	04d9      	lsls	r1, r3, #19
 80033f2:	6922      	ldr	r2, [r4, #16]
 80033f4:	6022      	str	r2, [r4, #0]
 80033f6:	d504      	bpl.n	8003402 <__sflush_r+0x7e>
 80033f8:	1c42      	adds	r2, r0, #1
 80033fa:	d101      	bne.n	8003400 <__sflush_r+0x7c>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b903      	cbnz	r3, 8003402 <__sflush_r+0x7e>
 8003400:	6560      	str	r0, [r4, #84]	; 0x54
 8003402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003404:	602f      	str	r7, [r5, #0]
 8003406:	2900      	cmp	r1, #0
 8003408:	d0c9      	beq.n	800339e <__sflush_r+0x1a>
 800340a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800340e:	4299      	cmp	r1, r3
 8003410:	d002      	beq.n	8003418 <__sflush_r+0x94>
 8003412:	4628      	mov	r0, r5
 8003414:	f000 f8de 	bl	80035d4 <_free_r>
 8003418:	2000      	movs	r0, #0
 800341a:	6360      	str	r0, [r4, #52]	; 0x34
 800341c:	e7c0      	b.n	80033a0 <__sflush_r+0x1c>
 800341e:	2301      	movs	r3, #1
 8003420:	4628      	mov	r0, r5
 8003422:	47b0      	blx	r6
 8003424:	1c41      	adds	r1, r0, #1
 8003426:	d1c8      	bne.n	80033ba <__sflush_r+0x36>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0c5      	beq.n	80033ba <__sflush_r+0x36>
 800342e:	2b1d      	cmp	r3, #29
 8003430:	d001      	beq.n	8003436 <__sflush_r+0xb2>
 8003432:	2b16      	cmp	r3, #22
 8003434:	d101      	bne.n	800343a <__sflush_r+0xb6>
 8003436:	602f      	str	r7, [r5, #0]
 8003438:	e7b1      	b.n	800339e <__sflush_r+0x1a>
 800343a:	89a3      	ldrh	r3, [r4, #12]
 800343c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	e7ad      	b.n	80033a0 <__sflush_r+0x1c>
 8003444:	690f      	ldr	r7, [r1, #16]
 8003446:	2f00      	cmp	r7, #0
 8003448:	d0a9      	beq.n	800339e <__sflush_r+0x1a>
 800344a:	0793      	lsls	r3, r2, #30
 800344c:	680e      	ldr	r6, [r1, #0]
 800344e:	bf08      	it	eq
 8003450:	694b      	ldreq	r3, [r1, #20]
 8003452:	600f      	str	r7, [r1, #0]
 8003454:	bf18      	it	ne
 8003456:	2300      	movne	r3, #0
 8003458:	eba6 0807 	sub.w	r8, r6, r7
 800345c:	608b      	str	r3, [r1, #8]
 800345e:	f1b8 0f00 	cmp.w	r8, #0
 8003462:	dd9c      	ble.n	800339e <__sflush_r+0x1a>
 8003464:	4643      	mov	r3, r8
 8003466:	463a      	mov	r2, r7
 8003468:	6a21      	ldr	r1, [r4, #32]
 800346a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800346c:	4628      	mov	r0, r5
 800346e:	47b0      	blx	r6
 8003470:	2800      	cmp	r0, #0
 8003472:	dc06      	bgt.n	8003482 <__sflush_r+0xfe>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347a:	81a3      	strh	r3, [r4, #12]
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	e78e      	b.n	80033a0 <__sflush_r+0x1c>
 8003482:	4407      	add	r7, r0
 8003484:	eba8 0800 	sub.w	r8, r8, r0
 8003488:	e7e9      	b.n	800345e <__sflush_r+0xda>
 800348a:	bf00      	nop
 800348c:	20400001 	.word	0x20400001

08003490 <_fflush_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	690b      	ldr	r3, [r1, #16]
 8003494:	4605      	mov	r5, r0
 8003496:	460c      	mov	r4, r1
 8003498:	b1db      	cbz	r3, 80034d2 <_fflush_r+0x42>
 800349a:	b118      	cbz	r0, 80034a4 <_fflush_r+0x14>
 800349c:	6983      	ldr	r3, [r0, #24]
 800349e:	b90b      	cbnz	r3, 80034a4 <_fflush_r+0x14>
 80034a0:	f7ff fa8e 	bl	80029c0 <__sinit>
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <_fflush_r+0x48>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	d109      	bne.n	80034be <_fflush_r+0x2e>
 80034aa:	686c      	ldr	r4, [r5, #4]
 80034ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b0:	b17b      	cbz	r3, 80034d2 <_fflush_r+0x42>
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034ba:	f7ff bf63 	b.w	8003384 <__sflush_r>
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <_fflush_r+0x4c>)
 80034c0:	429c      	cmp	r4, r3
 80034c2:	d101      	bne.n	80034c8 <_fflush_r+0x38>
 80034c4:	68ac      	ldr	r4, [r5, #8]
 80034c6:	e7f1      	b.n	80034ac <_fflush_r+0x1c>
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <_fflush_r+0x50>)
 80034ca:	429c      	cmp	r4, r3
 80034cc:	bf08      	it	eq
 80034ce:	68ec      	ldreq	r4, [r5, #12]
 80034d0:	e7ec      	b.n	80034ac <_fflush_r+0x1c>
 80034d2:	2000      	movs	r0, #0
 80034d4:	bd38      	pop	{r3, r4, r5, pc}
 80034d6:	bf00      	nop
 80034d8:	080037a0 	.word	0x080037a0
 80034dc:	080037c0 	.word	0x080037c0
 80034e0:	08003780 	.word	0x08003780

080034e4 <_lseek_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4c07      	ldr	r4, [pc, #28]	; (8003504 <_lseek_r+0x20>)
 80034e8:	4605      	mov	r5, r0
 80034ea:	4608      	mov	r0, r1
 80034ec:	4611      	mov	r1, r2
 80034ee:	2200      	movs	r2, #0
 80034f0:	6022      	str	r2, [r4, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f7fd fb85 	bl	8000c02 <_lseek>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d102      	bne.n	8003502 <_lseek_r+0x1e>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	b103      	cbz	r3, 8003502 <_lseek_r+0x1e>
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	20000140 	.word	0x20000140

08003508 <__swhatbuf_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	460e      	mov	r6, r1
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	2900      	cmp	r1, #0
 8003512:	b096      	sub	sp, #88	; 0x58
 8003514:	4614      	mov	r4, r2
 8003516:	461d      	mov	r5, r3
 8003518:	da07      	bge.n	800352a <__swhatbuf_r+0x22>
 800351a:	2300      	movs	r3, #0
 800351c:	602b      	str	r3, [r5, #0]
 800351e:	89b3      	ldrh	r3, [r6, #12]
 8003520:	061a      	lsls	r2, r3, #24
 8003522:	d410      	bmi.n	8003546 <__swhatbuf_r+0x3e>
 8003524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003528:	e00e      	b.n	8003548 <__swhatbuf_r+0x40>
 800352a:	466a      	mov	r2, sp
 800352c:	f000 f8b2 	bl	8003694 <_fstat_r>
 8003530:	2800      	cmp	r0, #0
 8003532:	dbf2      	blt.n	800351a <__swhatbuf_r+0x12>
 8003534:	9a01      	ldr	r2, [sp, #4]
 8003536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800353a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800353e:	425a      	negs	r2, r3
 8003540:	415a      	adcs	r2, r3
 8003542:	602a      	str	r2, [r5, #0]
 8003544:	e7ee      	b.n	8003524 <__swhatbuf_r+0x1c>
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	2000      	movs	r0, #0
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	b016      	add	sp, #88	; 0x58
 800354e:	bd70      	pop	{r4, r5, r6, pc}

08003550 <__smakebuf_r>:
 8003550:	898b      	ldrh	r3, [r1, #12]
 8003552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003554:	079d      	lsls	r5, r3, #30
 8003556:	4606      	mov	r6, r0
 8003558:	460c      	mov	r4, r1
 800355a:	d507      	bpl.n	800356c <__smakebuf_r+0x1c>
 800355c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	6123      	str	r3, [r4, #16]
 8003564:	2301      	movs	r3, #1
 8003566:	6163      	str	r3, [r4, #20]
 8003568:	b002      	add	sp, #8
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	ab01      	add	r3, sp, #4
 800356e:	466a      	mov	r2, sp
 8003570:	f7ff ffca 	bl	8003508 <__swhatbuf_r>
 8003574:	9900      	ldr	r1, [sp, #0]
 8003576:	4605      	mov	r5, r0
 8003578:	4630      	mov	r0, r6
 800357a:	f7ff faab 	bl	8002ad4 <_malloc_r>
 800357e:	b948      	cbnz	r0, 8003594 <__smakebuf_r+0x44>
 8003580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003584:	059a      	lsls	r2, r3, #22
 8003586:	d4ef      	bmi.n	8003568 <__smakebuf_r+0x18>
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	81a3      	strh	r3, [r4, #12]
 8003592:	e7e3      	b.n	800355c <__smakebuf_r+0xc>
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <__smakebuf_r+0x7c>)
 8003596:	62b3      	str	r3, [r6, #40]	; 0x28
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	6020      	str	r0, [r4, #0]
 800359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	9b00      	ldr	r3, [sp, #0]
 80035a4:	6163      	str	r3, [r4, #20]
 80035a6:	9b01      	ldr	r3, [sp, #4]
 80035a8:	6120      	str	r0, [r4, #16]
 80035aa:	b15b      	cbz	r3, 80035c4 <__smakebuf_r+0x74>
 80035ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 f881 	bl	80036b8 <_isatty_r>
 80035b6:	b128      	cbz	r0, 80035c4 <__smakebuf_r+0x74>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	431d      	orrs	r5, r3
 80035c8:	81a5      	strh	r5, [r4, #12]
 80035ca:	e7cd      	b.n	8003568 <__smakebuf_r+0x18>
 80035cc:	08002989 	.word	0x08002989

080035d0 <__malloc_lock>:
 80035d0:	4770      	bx	lr

080035d2 <__malloc_unlock>:
 80035d2:	4770      	bx	lr

080035d4 <_free_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4605      	mov	r5, r0
 80035d8:	2900      	cmp	r1, #0
 80035da:	d045      	beq.n	8003668 <_free_r+0x94>
 80035dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e0:	1f0c      	subs	r4, r1, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bfb8      	it	lt
 80035e6:	18e4      	addlt	r4, r4, r3
 80035e8:	f7ff fff2 	bl	80035d0 <__malloc_lock>
 80035ec:	4a1f      	ldr	r2, [pc, #124]	; (800366c <_free_r+0x98>)
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	4610      	mov	r0, r2
 80035f2:	b933      	cbnz	r3, 8003602 <_free_r+0x2e>
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	6014      	str	r4, [r2, #0]
 80035f8:	4628      	mov	r0, r5
 80035fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035fe:	f7ff bfe8 	b.w	80035d2 <__malloc_unlock>
 8003602:	42a3      	cmp	r3, r4
 8003604:	d90c      	bls.n	8003620 <_free_r+0x4c>
 8003606:	6821      	ldr	r1, [r4, #0]
 8003608:	1862      	adds	r2, r4, r1
 800360a:	4293      	cmp	r3, r2
 800360c:	bf04      	itt	eq
 800360e:	681a      	ldreq	r2, [r3, #0]
 8003610:	685b      	ldreq	r3, [r3, #4]
 8003612:	6063      	str	r3, [r4, #4]
 8003614:	bf04      	itt	eq
 8003616:	1852      	addeq	r2, r2, r1
 8003618:	6022      	streq	r2, [r4, #0]
 800361a:	6004      	str	r4, [r0, #0]
 800361c:	e7ec      	b.n	80035f8 <_free_r+0x24>
 800361e:	4613      	mov	r3, r2
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	b10a      	cbz	r2, 8003628 <_free_r+0x54>
 8003624:	42a2      	cmp	r2, r4
 8003626:	d9fa      	bls.n	800361e <_free_r+0x4a>
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	1858      	adds	r0, r3, r1
 800362c:	42a0      	cmp	r0, r4
 800362e:	d10b      	bne.n	8003648 <_free_r+0x74>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	4401      	add	r1, r0
 8003634:	1858      	adds	r0, r3, r1
 8003636:	4282      	cmp	r2, r0
 8003638:	6019      	str	r1, [r3, #0]
 800363a:	d1dd      	bne.n	80035f8 <_free_r+0x24>
 800363c:	6810      	ldr	r0, [r2, #0]
 800363e:	6852      	ldr	r2, [r2, #4]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	4401      	add	r1, r0
 8003644:	6019      	str	r1, [r3, #0]
 8003646:	e7d7      	b.n	80035f8 <_free_r+0x24>
 8003648:	d902      	bls.n	8003650 <_free_r+0x7c>
 800364a:	230c      	movs	r3, #12
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	e7d3      	b.n	80035f8 <_free_r+0x24>
 8003650:	6820      	ldr	r0, [r4, #0]
 8003652:	1821      	adds	r1, r4, r0
 8003654:	428a      	cmp	r2, r1
 8003656:	bf04      	itt	eq
 8003658:	6811      	ldreq	r1, [r2, #0]
 800365a:	6852      	ldreq	r2, [r2, #4]
 800365c:	6062      	str	r2, [r4, #4]
 800365e:	bf04      	itt	eq
 8003660:	1809      	addeq	r1, r1, r0
 8003662:	6021      	streq	r1, [r4, #0]
 8003664:	605c      	str	r4, [r3, #4]
 8003666:	e7c7      	b.n	80035f8 <_free_r+0x24>
 8003668:	bd38      	pop	{r3, r4, r5, pc}
 800366a:	bf00      	nop
 800366c:	20000094 	.word	0x20000094

08003670 <_read_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4c07      	ldr	r4, [pc, #28]	; (8003690 <_read_r+0x20>)
 8003674:	4605      	mov	r5, r0
 8003676:	4608      	mov	r0, r1
 8003678:	4611      	mov	r1, r2
 800367a:	2200      	movs	r2, #0
 800367c:	6022      	str	r2, [r4, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	f7fd fa5f 	bl	8000b42 <_read>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d102      	bne.n	800368e <_read_r+0x1e>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	b103      	cbz	r3, 800368e <_read_r+0x1e>
 800368c:	602b      	str	r3, [r5, #0]
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	20000140 	.word	0x20000140

08003694 <_fstat_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4c07      	ldr	r4, [pc, #28]	; (80036b4 <_fstat_r+0x20>)
 8003698:	2300      	movs	r3, #0
 800369a:	4605      	mov	r5, r0
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	f7fd fa93 	bl	8000bcc <_fstat>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d102      	bne.n	80036b0 <_fstat_r+0x1c>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	b103      	cbz	r3, 80036b0 <_fstat_r+0x1c>
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	bd38      	pop	{r3, r4, r5, pc}
 80036b2:	bf00      	nop
 80036b4:	20000140 	.word	0x20000140

080036b8 <_isatty_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4c06      	ldr	r4, [pc, #24]	; (80036d4 <_isatty_r+0x1c>)
 80036bc:	2300      	movs	r3, #0
 80036be:	4605      	mov	r5, r0
 80036c0:	4608      	mov	r0, r1
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	f7fd fa92 	bl	8000bec <_isatty>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_isatty_r+0x1a>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_isatty_r+0x1a>
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	20000140 	.word	0x20000140

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
